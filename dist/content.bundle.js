/*! For license information please see content.bundle.js.LICENSE.txt */
(()=>{var e={3476:function(e,t){!function(e){"use strict";var t=function(){return(t=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function r(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var a=arguments[t],i=0,l=a.length;i<l;i++,o++)n[o]=a[i];return n}function n(e,r){var n,o,a=(n={current:0,next:function(){return++this.current}},o={},{add:function(e,t){var r=null!=t?t:n.next();return o[r]=e,r},resolve:function(e,t,r){var n=o[e];n&&(r(t)?n.resolve(t):n.reject(t),o[e]=null)}});return r((function(e){if(e.detail&&e.detail.data&&"object"==typeof e.detail.data&&"request_id"in e.detail.data){var t=e.detail.data,r=t.request_id,n=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(t,["request_id"]);r&&a.resolve(r,n,(function(e){return!("error_type"in e)}))}})),function(r,n){return void 0===n&&(n={}),new Promise((function(o,i){var l=a.add({resolve:o,reject:i},n.request_id);e(r,t(t({},n),{request_id:l}))}))}}var o,a,i,l,s,u,c,d="undefined"!=typeof window,f=Boolean(d&&window.AndroidBridge),p=Boolean(d&&window.webkit&&window.webkit.messageHandlers&&window.webkit.messageHandlers.VKWebAppClose),m=Boolean(d&&window.ReactNativeWebView&&"function"==typeof window.ReactNativeWebView.postMessage),h=d&&!f&&!p,v=h&&/(^\?|&)vk_platform=mobile_web(&|$)/.test(location.search),b=h?"message":"VKWebAppEvent",g=r(["VKWebAppInit","VKWebAppGetCommunityAuthToken","VKWebAppAddToCommunity","VKWebAppAddToHomeScreenInfo","VKWebAppClose","VKWebAppCopyText","VKWebAppCreateHash","VKWebAppGetUserInfo","VKWebAppSetLocation","VKWebAppSendToClient","VKWebAppGetClientVersion","VKWebAppGetPhoneNumber","VKWebAppGetEmail","VKWebAppGetGroupInfo","VKWebAppGetGeodata","VKWebAppGetCommunityToken","VKWebAppGetConfig","VKWebAppGetLaunchParams","VKWebAppSetTitle","VKWebAppGetAuthToken","VKWebAppCallAPIMethod","VKWebAppJoinGroup","VKWebAppLeaveGroup","VKWebAppAllowMessagesFromGroup","VKWebAppDenyNotifications","VKWebAppAllowNotifications","VKWebAppOpenPayForm","VKWebAppOpenApp","VKWebAppShare","VKWebAppShowWallPostBox","VKWebAppScroll","VKWebAppShowOrderBox","VKWebAppShowLeaderBoardBox","VKWebAppShowInviteBox","VKWebAppShowRequestBox","VKWebAppAddToFavorites","VKWebAppShowStoryBox","VKWebAppStorageGet","VKWebAppStorageGetKeys","VKWebAppStorageSet","VKWebAppFlashGetInfo","VKWebAppSubscribeStoryApp","VKWebAppOpenWallPost","VKWebAppCheckAllowedScopes","VKWebAppCheckBannerAd","VKWebAppHideBannerAd","VKWebAppShowBannerAd","VKWebAppCheckNativeAds","VKWebAppShowNativeAds","VKWebAppRetargetingPixel","VKWebAppConversionHit","VKWebAppShowSubscriptionBox","VKWebAppCheckSurvey","VKWebAppShowSurvey","VKWebAppScrollTop","VKWebAppScrollTopStart","VKWebAppScrollTopStop","VKWebAppShowActionSheet"],h&&!v?["VKWebAppResizeWindow","VKWebAppAddToMenu","VKWebAppShowInstallPushBox","VKWebAppGetFriends","VKWebAppShowCommunityWidgetPreviewBox"]:["VKWebAppShowImages"]),y=d?window.AndroidBridge:void 0,_=p?window.webkit.messageHandlers:void 0,w=h?parent:void 0;(o=e.EAdsFormats||(e.EAdsFormats={})).REWARD="reward",o.INTERSTITIAL="interstitial",(a=e.BannerAdLayoutType||(e.BannerAdLayoutType={})).RESIZE="resize",a.OVERLAY="overlay",(i=e.BannerAdLocation||(e.BannerAdLocation={})).TOP="top",i.BOTTOM="bottom",(l=e.EGrantedPermission||(e.EGrantedPermission={})).CAMERA="camera",l.LOCATION="location",l.PHOTO="photo",(s=e.EGetLaunchParamsResponseLanguages||(e.EGetLaunchParamsResponseLanguages={})).RU="ru",s.UK="uk",s.UA="ua",s.EN="en",s.BE="be",s.KZ="kz",s.PT="pt",s.ES="es",(u=e.EGetLaunchParamsResponseGroupRole||(e.EGetLaunchParamsResponseGroupRole={})).ADMIN="admin",u.EDITOR="editor",u.MEMBER="member",u.MODER="moder",u.NONE="none",(c=e.EGetLaunchParamsResponsePlatforms||(e.EGetLaunchParamsResponsePlatforms={})).DESKTOP_WEB="desktop_web",c.MOBILE_WEB="mobile_web",c.MOBILE_ANDROID="mobile_android",c.MOBILE_ANDROID_MESSENGER="mobile_android_messenger",c.MOBILE_IPHONE="mobile_iphone",c.MOBILE_IPHONE_MESSENGER="mobile_iphone_messenger",c.MOBILE_IPAD="mobile_ipad";var S=function(e){var t=void 0,o=[];function a(e){o.push(e)}function i(){return p||f}function l(){return h&&window.parent!==window}function s(){return i()||l()}function u(e){if(p||f)return r(o).map((function(t){return t.call(null,e)}));var n=null==e?void 0:e.data;if(h&&n){if(m&&"string"==typeof n)try{n=JSON.parse(n)}catch(n){}var a=n.type,i=n.data,l=n.frameId;a&&("SetSupportedHandlers"!==a?"VKWebAppSettings"!==a?r(o).map((function(e){return e({detail:{type:a,data:i}})})):t=l:i.supportedHandlers)}}m&&/(android)/i.test(navigator.userAgent)?document.addEventListener(b,u):"undefined"!=typeof window&&"addEventListener"in window&&window.addEventListener(b,u);var c=n((function(e,r){y&&y[e]?y[e](JSON.stringify(r)):_&&_[e]&&"function"==typeof _[e].postMessage?_[e].postMessage(r):m?window.ReactNativeWebView.postMessage(JSON.stringify({handler:e,params:r})):w&&"function"==typeof w.postMessage&&w.postMessage({handler:e,params:r,type:"vk-connect",webFrameId:t,connectVersion:"2.7.4"},"*")}),a);return{send:c,sendPromise:c,subscribe:a,unsubscribe:function(e){var t=o.indexOf(e);-1<t&&o.splice(t,1)},supports:function(e){return f?!(!y||"function"!=typeof y[e]):p?!(!_||!_[e]||"function"!=typeof _[e].postMessage):h&&-1<g.indexOf(e)},isWebView:i,isIframe:l,isEmbedded:s,isStandalone:function(){return!s()}}}();e.applyMiddleware=function e(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return r.includes(void 0)||r.includes(null)?e.apply(void 0,r.filter((function(e){return"function"==typeof e}))):function(e){if(0===r.length)return e;var n,o={subscribe:e.subscribe,send:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.send.apply(e,t)}};return n=r.filter((function(e){return"function"==typeof e})).map((function(e){return e(o)})).reduce((function(e,t){return function(r){return e(t(r))}}))(e.send),t(t({},e),{send:n})}},e.default=S,Object.defineProperty(e,"__esModule",{value:!0})}(t)},9560:function(e,t,r){var n;!function(o){"use strict";function a(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function i(e,t,r,n,o,i){return a((l=a(a(t,e),a(n,i)))<<(s=o)|l>>>32-s,r);var l,s}function l(e,t,r,n,o,a,l){return i(t&r|~t&n,e,t,o,a,l)}function s(e,t,r,n,o,a,l){return i(t&n|r&~n,e,t,o,a,l)}function u(e,t,r,n,o,a,l){return i(t^r^n,e,t,o,a,l)}function c(e,t,r,n,o,a,l){return i(r^(t|~n),e,t,o,a,l)}function d(e,t){var r,n,o,i,d;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var f=1732584193,p=-271733879,m=-1732584194,h=271733878;for(r=0;r<e.length;r+=16)n=f,o=p,i=m,d=h,f=l(f,p,m,h,e[r],7,-680876936),h=l(h,f,p,m,e[r+1],12,-389564586),m=l(m,h,f,p,e[r+2],17,606105819),p=l(p,m,h,f,e[r+3],22,-1044525330),f=l(f,p,m,h,e[r+4],7,-176418897),h=l(h,f,p,m,e[r+5],12,1200080426),m=l(m,h,f,p,e[r+6],17,-1473231341),p=l(p,m,h,f,e[r+7],22,-45705983),f=l(f,p,m,h,e[r+8],7,1770035416),h=l(h,f,p,m,e[r+9],12,-1958414417),m=l(m,h,f,p,e[r+10],17,-42063),p=l(p,m,h,f,e[r+11],22,-1990404162),f=l(f,p,m,h,e[r+12],7,1804603682),h=l(h,f,p,m,e[r+13],12,-40341101),m=l(m,h,f,p,e[r+14],17,-1502002290),f=s(f,p=l(p,m,h,f,e[r+15],22,1236535329),m,h,e[r+1],5,-165796510),h=s(h,f,p,m,e[r+6],9,-1069501632),m=s(m,h,f,p,e[r+11],14,643717713),p=s(p,m,h,f,e[r],20,-373897302),f=s(f,p,m,h,e[r+5],5,-701558691),h=s(h,f,p,m,e[r+10],9,38016083),m=s(m,h,f,p,e[r+15],14,-660478335),p=s(p,m,h,f,e[r+4],20,-405537848),f=s(f,p,m,h,e[r+9],5,568446438),h=s(h,f,p,m,e[r+14],9,-1019803690),m=s(m,h,f,p,e[r+3],14,-187363961),p=s(p,m,h,f,e[r+8],20,1163531501),f=s(f,p,m,h,e[r+13],5,-1444681467),h=s(h,f,p,m,e[r+2],9,-51403784),m=s(m,h,f,p,e[r+7],14,1735328473),f=u(f,p=s(p,m,h,f,e[r+12],20,-1926607734),m,h,e[r+5],4,-378558),h=u(h,f,p,m,e[r+8],11,-2022574463),m=u(m,h,f,p,e[r+11],16,1839030562),p=u(p,m,h,f,e[r+14],23,-35309556),f=u(f,p,m,h,e[r+1],4,-1530992060),h=u(h,f,p,m,e[r+4],11,1272893353),m=u(m,h,f,p,e[r+7],16,-155497632),p=u(p,m,h,f,e[r+10],23,-1094730640),f=u(f,p,m,h,e[r+13],4,681279174),h=u(h,f,p,m,e[r],11,-358537222),m=u(m,h,f,p,e[r+3],16,-722521979),p=u(p,m,h,f,e[r+6],23,76029189),f=u(f,p,m,h,e[r+9],4,-640364487),h=u(h,f,p,m,e[r+12],11,-421815835),m=u(m,h,f,p,e[r+15],16,530742520),f=c(f,p=u(p,m,h,f,e[r+2],23,-995338651),m,h,e[r],6,-198630844),h=c(h,f,p,m,e[r+7],10,1126891415),m=c(m,h,f,p,e[r+14],15,-1416354905),p=c(p,m,h,f,e[r+5],21,-57434055),f=c(f,p,m,h,e[r+12],6,1700485571),h=c(h,f,p,m,e[r+3],10,-1894986606),m=c(m,h,f,p,e[r+10],15,-1051523),p=c(p,m,h,f,e[r+1],21,-2054922799),f=c(f,p,m,h,e[r+8],6,1873313359),h=c(h,f,p,m,e[r+15],10,-30611744),m=c(m,h,f,p,e[r+6],15,-1560198380),p=c(p,m,h,f,e[r+13],21,1309151649),f=c(f,p,m,h,e[r+4],6,-145523070),h=c(h,f,p,m,e[r+11],10,-1120210379),m=c(m,h,f,p,e[r+2],15,718787259),p=c(p,m,h,f,e[r+9],21,-343485551),f=a(f,n),p=a(p,o),m=a(m,i),h=a(h,d);return[f,p,m,h]}function f(e){var t,r="",n=32*e.length;for(t=0;t<n;t+=8)r+=String.fromCharCode(e[t>>5]>>>t%32&255);return r}function p(e){var t,r=[];for(r[(e.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var n=8*e.length;for(t=0;t<n;t+=8)r[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return r}function m(e){var t,r,n="0123456789abcdef",o="";for(r=0;r<e.length;r+=1)t=e.charCodeAt(r),o+=n.charAt(t>>>4&15)+n.charAt(15&t);return o}function h(e){return unescape(encodeURIComponent(e))}function v(e){return function(e){return f(d(p(e),8*e.length))}(h(e))}function b(e,t){return function(e,t){var r,n,o=p(e),a=[],i=[];for(a[15]=i[15]=void 0,o.length>16&&(o=d(o,8*e.length)),r=0;r<16;r+=1)a[r]=909522486^o[r],i[r]=1549556828^o[r];return n=d(a.concat(p(t)),512+8*t.length),f(d(i.concat(n),640))}(h(e),h(t))}function g(e,t,r){return t?r?b(t,e):m(b(t,e)):r?v(e):m(v(e))}void 0===(n=function(){return g}.call(t,r,t,e))||(e.exports=n)}()},4448:(e,t,r)=>{"use strict";var n=r(7294),o=r(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function y(e,t,r,n){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!d.call(m,e)||!d.call(p,e)&&(f.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),A=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),x=Symbol.for("react.context"),W=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),V=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var N=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var K=Symbol.iterator;function P(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=K&&e[K]||e["@@iterator"])?e:null}var j,M=Object.assign;function L(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=n.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var s="\n"+o[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?L(e):""}function I(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case A:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case V:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case x:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case W:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function D(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=H(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $(e,t){var r=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function Q(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=D(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Z(e,t){X(e,t);var r=D(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,r):t.hasOwnProperty("defaultValue")&&ee(e,t.type,D(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ee(e,t,r){"number"===t&&Y(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var te=Array.isArray;function re(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+D(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(a(92));if(te(r)){if(1<r.length)throw Error(a(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:D(r)}}function ae(e,t){var r=D(t.value),n=D(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=he(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var be=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,Ee=null;function Ae(e){if(e=_o(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Ce(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function xe(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function We(e,t){return e(t)}function Te(){}var Ve=!1;function Oe(e,t,r){if(Ve)return e(t,r);Ve=!0;try{return We(e,t,r)}finally{Ve=!1,(null!==ke||null!==Ee)&&(Te(),xe())}}function Re(e,t){var r=e.stateNode;if(null===r)return null;var n=So(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(a(231,t,typeof r));return r}var Ne=!1;if(c)try{var Ke={};Object.defineProperty(Ke,"passive",{get:function(){Ne=!0}}),window.addEventListener("test",Ke,Ke),window.removeEventListener("test",Ke,Ke)}catch(ce){Ne=!1}function Pe(e,t,r,n,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(r,u)}catch(e){this.onError(e)}}var je=!1,Me=null,Le=!1,ze=null,Fe={onError:function(e){je=!0,Me=e}};function Ie(e,t,r,n,o,a,i,l,s){je=!1,Me=null,Pe.apply(Fe,arguments)}function Be(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function De(e){if(Be(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(a(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(n=o.return)){r=n;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===r)return De(o),e;if(i===n)return De(o),t;i=i.sibling}throw Error(a(188))}if(r.return!==n.return)r=o,n=i;else{for(var l=!1,s=o.child;s;){if(s===r){l=!0,r=o,n=i;break}if(s===n){l=!0,n=o,r=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===r){l=!0,r=i,n=o;break}if(s===n){l=!0,n=i,r=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(r.alternate!==n)throw Error(a(190))}if(3!==r.tag)throw Error(a(188));return r.stateNode.current===r?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Ge=o.unstable_scheduleCallback,Ye=o.unstable_cancelCallback,$e=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,rt=o.unstable_LowPriority,nt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&r;if(0!==i){var l=i&~o;0!==l?n=dt(l):0!=(a&=i)&&(n=dt(a))}else 0!=(i=r&~o)?n=dt(i):0!==a&&(n=dt(a));if(0===n)return 0;if(0!==t&&t!==n&&0==(t&o)&&((o=n&-n)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&n)&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-it(t)),n|=e[r],t&=~o;return n}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function vt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function bt(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=r}function gt(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-it(r),o=1<<n;o&t|e[n]&t&&(e[n]|=t),r&=~o}}var yt=0;function _t(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,St,kt,Et,At,Ct=!1,xt=[],Wt=null,Tt=null,Vt=null,Ot=new Map,Rt=new Map,Nt=[],Kt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Pt(e,t){switch(e){case"focusin":case"focusout":Wt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Vt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function jt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=_o(t))&&St(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Mt(e){var t=yo(e.target);if(null!==t){var r=Be(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Ue(r)))return e.blockedOn=t,void At(e.priority,(function(){kt(r)}))}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=$t(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=_o(r))&&St(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);_e=n,r.target.dispatchEvent(n),_e=null,t.shift()}return!0}function zt(e,t,r){Lt(e)&&r.delete(t)}function Ft(){Ct=!1,null!==Wt&&Lt(Wt)&&(Wt=null),null!==Tt&&Lt(Tt)&&(Tt=null),null!==Vt&&Lt(Vt)&&(Vt=null),Ot.forEach(zt),Rt.forEach(zt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Bt(e){function t(t){return It(t,e)}if(0<xt.length){It(xt[0],e);for(var r=1;r<xt.length;r++){var n=xt[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Wt&&It(Wt,e),null!==Tt&&It(Tt,e),null!==Vt&&It(Vt,e),Ot.forEach(t),Rt.forEach(t),r=0;r<Nt.length;r++)(n=Nt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<Nt.length&&null===(r=Nt[0]).blockedOn;)Mt(r),null===r.blockedOn&&Nt.shift()}var Ut=_.ReactCurrentBatchConfig,Dt=!0;function Ht(e,t,r,n){var o=yt,a=Ut.transition;Ut.transition=null;try{yt=1,Gt(e,t,r,n)}finally{yt=o,Ut.transition=a}}function qt(e,t,r,n){var o=yt,a=Ut.transition;Ut.transition=null;try{yt=4,Gt(e,t,r,n)}finally{yt=o,Ut.transition=a}}function Gt(e,t,r,n){if(Dt){var o=$t(e,t,r,n);if(null===o)Dn(e,t,n,Yt,r),Pt(e,n);else if(function(e,t,r,n,o){switch(t){case"focusin":return Wt=jt(Wt,e,t,r,n,o),!0;case"dragenter":return Tt=jt(Tt,e,t,r,n,o),!0;case"mouseover":return Vt=jt(Vt,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return Ot.set(a,jt(Ot.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,Rt.set(a,jt(Rt.get(a)||null,e,t,r,n,o)),!0}return!1}(o,e,t,r,n))n.stopPropagation();else if(Pt(e,n),4&t&&-1<Kt.indexOf(e)){for(;null!==o;){var a=_o(o);if(null!==a&&wt(a),null===(a=$t(e,t,r,n))&&Dn(e,t,n,Yt,r),a===o)break;o=a}null!==o&&n.stopPropagation()}else Dn(e,t,n,null,r)}}var Yt=null;function $t(e,t,r,n){if(Yt=null,null!==(e=yo(e=we(n))))if(null===(t=Be(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case rt:return 16;case nt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function er(){if(Jt)return Jt;var e,t,r=Zt,n=r.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rr(){return!0}function nr(){return!1}function or(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rr:nr,this.isPropagationStopped=nr,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rr)},persist:function(){},isPersistent:rr}),t}var ar,ir,lr,sr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ur=or(sr),cr=M({},sr,{view:0,detail:0}),dr=or(cr),fr=M({},cr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Er,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lr&&(lr&&"mousemove"===e.type?(ar=e.screenX-lr.screenX,ir=e.screenY-lr.screenY):ir=ar=0,lr=e),ar)},movementY:function(e){return"movementY"in e?e.movementY:ir}}),pr=or(fr),mr=or(M({},fr,{dataTransfer:0})),hr=or(M({},cr,{relatedTarget:0})),vr=or(M({},sr,{animationName:0,elapsedTime:0,pseudoElement:0})),br=M({},sr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),gr=or(br),yr=or(M({},sr,{data:0})),_r={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Er(){return kr}var Ar=M({},cr,{key:function(e){if(e.key){var t=_r[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Er,charCode:function(e){return"keypress"===e.type?tr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cr=or(Ar),xr=or(M({},fr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Wr=or(M({},cr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Er})),Tr=or(M({},sr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Vr=M({},fr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Or=or(Vr),Rr=[9,13,27,32],Nr=c&&"CompositionEvent"in window,Kr=null;c&&"documentMode"in document&&(Kr=document.documentMode);var Pr=c&&"TextEvent"in window&&!Kr,jr=c&&(!Nr||Kr&&8<Kr&&11>=Kr),Mr=String.fromCharCode(32),Lr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Rr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ir=!1,Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ur(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Dr(e,t,r,n){Ce(n),0<(t=qn(t,"onChange")).length&&(r=new ur("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Hr=null,qr=null;function Gr(e){Ln(e,0)}function Yr(e){if(G(wo(e)))return e}function $r(e,t){if("change"===e)return t}var Qr=!1;if(c){var Xr;if(c){var Zr="oninput"in document;if(!Zr){var Jr=document.createElement("div");Jr.setAttribute("oninput","return;"),Zr="function"==typeof Jr.oninput}Xr=Zr}else Xr=!1;Qr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Hr&&(Hr.detachEvent("onpropertychange",tn),qr=Hr=null)}function tn(e){if("value"===e.propertyName&&Yr(qr)){var t=[];Dr(t,qr,e,we(e)),Oe(Gr,t)}}function rn(e,t,r){"focusin"===e?(en(),qr=r,(Hr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yr(qr)}function on(e,t){if("click"===e)return Yr(t)}function an(e,t){if("input"===e||"change"===e)return Yr(t)}var ln="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sn(e,t){if(ln(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var o=r[n];if(!d.call(t,o)||!ln(e[o],t[o]))return!1}return!0}function un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cn(e,t){var r,n=un(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=un(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fn(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=Y((e=t.contentWindow).document)}return t}function pn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mn(e){var t=fn(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&dn(r.ownerDocument.documentElement,r)){if(null!==n&&pn(r))if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=r.textContent.length,a=Math.min(n.start,o);n=void 0===n.end?a:Math.min(n.end,o),!e.extend&&a>n&&(o=n,n=a,a=o),o=cn(r,a);var i=cn(r,n);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>n?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hn=c&&"documentMode"in document&&11>=document.documentMode,vn=null,bn=null,gn=null,yn=!1;function _n(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;yn||null==vn||vn!==Y(n)||(n="selectionStart"in(n=vn)&&pn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},gn&&sn(gn,n)||(gn=n,0<(n=qn(bn,"onSelect")).length&&(t=new ur("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}function wn(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var Sn={animationend:wn("Animation","AnimationEnd"),animationiteration:wn("Animation","AnimationIteration"),animationstart:wn("Animation","AnimationStart"),transitionend:wn("Transition","TransitionEnd")},kn={},En={};function An(e){if(kn[e])return kn[e];if(!Sn[e])return e;var t,r=Sn[e];for(t in r)if(r.hasOwnProperty(t)&&t in En)return kn[e]=r[t];return e}c&&(En=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Cn=An("animationend"),xn=An("animationiteration"),Wn=An("animationstart"),Tn=An("transitionend"),Vn=new Map,On="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rn(e,t){Vn.set(e,t),s(t,[e])}for(var Nn=0;Nn<On.length;Nn++){var Kn=On[Nn];Rn(Kn.toLowerCase(),"on"+(Kn[0].toUpperCase()+Kn.slice(1)))}Rn(Cn,"onAnimationEnd"),Rn(xn,"onAnimationIteration"),Rn(Wn,"onAnimationStart"),Rn("dblclick","onDoubleClick"),Rn("focusin","onFocus"),Rn("focusout","onBlur"),Rn(Tn,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jn=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pn));function Mn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,i,l,s,u){if(Ie.apply(this,arguments),je){if(!je)throw Error(a(198));var c=Me;je=!1,Me=null,Le||(Le=!0,ze=c)}}(n,t,void 0,e),e.currentTarget=null}function Ln(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Mn(o,l,u),a=s}else for(i=0;i<n.length;i++){if(s=(l=n[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Mn(o,l,u),a=s}}}if(Le)throw e=ze,Le=!1,ze=null,e}function zn(e,t){var r=t[vo];void 0===r&&(r=t[vo]=new Set);var n=e+"__bubble";r.has(n)||(Un(t,e,2,!1),r.add(n))}function Fn(e,t,r){var n=0;t&&(n|=4),Un(r,e,n,t)}var In="_reactListening"+Math.random().toString(36).slice(2);function Bn(e){if(!e[In]){e[In]=!0,i.forEach((function(t){"selectionchange"!==t&&(jn.has(t)||Fn(t,!1,e),Fn(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[In]||(t[In]=!0,Fn("selectionchange",!1,t))}}function Un(e,t,r,n){switch(Qt(t)){case 1:var o=Ht;break;case 4:o=qt;break;default:o=Gt}r=o.bind(null,t,r,e),o=void 0,!Ne||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Dn(e,t,r,n,o){var a=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=yo(l)))return;if(5===(s=i.tag)||6===s){n=a=i;continue e}l=l.parentNode}}n=n.return}Oe((function(){var n=a,o=we(r),i=[];e:{var l=Vn.get(e);if(void 0!==l){var s=ur,u=e;switch(e){case"keypress":if(0===tr(r))break e;case"keydown":case"keyup":s=Cr;break;case"focusin":u="focus",s=hr;break;case"focusout":u="blur",s=hr;break;case"beforeblur":case"afterblur":s=hr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Wr;break;case Cn:case xn:case Wn:s=vr;break;case Tn:s=Tr;break;case"scroll":s=dr;break;case"wheel":s=Or;break;case"copy":case"cut":case"paste":s=gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=xr}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=n;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=Re(m,f))&&c.push(Hn(m,h,p))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,r,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||r===_e||!(u=r.relatedTarget||r.fromElement)||!yo(u)&&!u[ho])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=n,null!==(u=(u=r.relatedTarget||r.toElement)?yo(u):null)&&(u!==(d=Be(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=n),s!==u)){if(c=pr,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=xr,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==s?l:wo(s),p=null==u?l:wo(u),(l=new c(h,m+"leave",s,r,o)).target=d,l.relatedTarget=p,h=null,yo(o)===n&&((c=new c(f,m+"enter",u,r,o)).target=p,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(f=u,m=0,p=c=s;p;p=Gn(p))m++;for(p=0,h=f;h;h=Gn(h))p++;for(;0<m-p;)c=Gn(c),m--;for(;0<p-m;)f=Gn(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Gn(c),f=Gn(f)}c=null}else c=null;null!==s&&Yn(i,l,s,c,!1),null!==u&&null!==d&&Yn(i,d,u,c,!0)}if("select"===(s=(l=n?wo(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var v=$r;else if(Ur(l))if(Qr)v=an;else{v=nn;var b=rn}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Dr(i,v,r,o):(b&&b(e,l,n),"focusout"===e&&(b=l._wrapperState)&&b.controlled&&"number"===l.type&&ee(l,"number",l.value)),b=n?wo(n):window,e){case"focusin":(Ur(b)||"true"===b.contentEditable)&&(vn=b,bn=n,gn=null);break;case"focusout":gn=bn=vn=null;break;case"mousedown":yn=!0;break;case"contextmenu":case"mouseup":case"dragend":yn=!1,_n(i,r,o);break;case"selectionchange":if(hn)break;case"keydown":case"keyup":_n(i,r,o)}var g;if(Nr)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Ir?zr(e,r)&&(y="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(y="onCompositionStart");y&&(jr&&"ko"!==r.locale&&(Ir||"onCompositionStart"!==y?"onCompositionEnd"===y&&Ir&&(g=er()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,Ir=!0)),0<(b=qn(n,y)).length&&(y=new yr(y,e,null,r,o),i.push({event:y,listeners:b}),(g||null!==(g=Fr(r)))&&(y.data=g))),(g=Pr?function(e,t){switch(e){case"compositionend":return Fr(t);case"keypress":return 32!==t.which?null:(Lr=!0,Mr);case"textInput":return(e=t.data)===Mr&&Lr?null:e;default:return null}}(e,r):function(e,t){if(Ir)return"compositionend"===e||!Nr&&zr(e,t)?(e=er(),Jt=Zt=Xt=null,Ir=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jr&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=qn(n,"onBeforeInput")).length&&(o=new yr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=g)}Ln(i,t)}))}function Hn(e,t,r){return{instance:e,listener:t,currentTarget:r}}function qn(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Re(e,r))&&n.unshift(Hn(e,a,o)),null!=(a=Re(e,t))&&n.push(Hn(e,a,o))),e=e.return}return n}function Gn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,s=l.alternate,u=l.stateNode;if(null!==s&&s===n)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Re(r,a))&&i.unshift(Hn(r,s,l)):o||null!=(s=Re(r,a))&&i.push(Hn(r,s,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}var $n=/\r\n?/g,Qn=/\u0000|\uFFFD/g;function Xn(e){return("string"==typeof e?e:""+e).replace($n,"\n").replace(Qn,"")}function Zn(e,t,r){if(t=Xn(t),Xn(e)!==t&&r)throw Error(a(425))}function Jn(){}var eo=null,to=null;function ro(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var no="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:no;function lo(e){setTimeout((function(){throw e}))}function so(e,t){var r=t,n=0;do{var o=r.nextSibling;if(e.removeChild(r),o&&8===o.nodeType)if("/$"===(r=o.data)){if(0===n)return e.removeChild(o),void Bt(t);n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++;r=o}while(r);Bt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,mo="__reactProps$"+fo,ho="__reactContainer$"+fo,vo="__reactEvents$"+fo,bo="__reactListeners$"+fo,go="__reactHandles$"+fo;function yo(e){var t=e[po];if(t)return t;for(var r=e.parentNode;r;){if(t=r[ho]||r[po]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=co(e);null!==e;){if(r=e[po])return r;e=co(e)}return t}r=(e=r).parentNode}return null}function _o(e){return!(e=e[po]||e[ho])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[mo]||null}var ko=[],Eo=-1;function Ao(e){return{current:e}}function Co(e){0>Eo||(e.current=ko[Eo],ko[Eo]=null,Eo--)}function xo(e,t){Eo++,ko[Eo]=e.current,e.current=t}var Wo={},To=Ao(Wo),Vo=Ao(!1),Oo=Wo;function Ro(e,t){var r=e.type.contextTypes;if(!r)return Wo;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function No(e){return null!=e.childContextTypes}function Ko(){Co(Vo),Co(To)}function Po(e,t,r){if(To.current!==Wo)throw Error(a(168));xo(To,t),xo(Vo,r)}function jo(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var o in n=n.getChildContext())if(!(o in t))throw Error(a(108,U(e)||"Unknown",o));return M({},r,n)}function Mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Wo,Oo=To.current,xo(To,e),xo(Vo,Vo.current),!0}function Lo(e,t,r){var n=e.stateNode;if(!n)throw Error(a(169));r?(e=jo(e,t,Oo),n.__reactInternalMemoizedMergedChildContext=e,Co(Vo),Co(To),xo(To,e)):Co(Vo),xo(Vo,r)}var zo=null,Fo=!1,Io=!1;function Bo(e){null===zo?zo=[e]:zo.push(e)}function Uo(){if(!Io&&null!==zo){Io=!0;var e=0,t=yt;try{var r=zo;for(yt=1;e<r.length;e++){var n=r[e];do{n=n(!0)}while(null!==n)}zo=null,Fo=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ge(Je,Uo),t}finally{yt=t,Io=!1}}return null}var Do=[],Ho=0,qo=null,Go=0,Yo=[],$o=0,Qo=null,Xo=1,Zo="";function Jo(e,t){Do[Ho++]=Go,Do[Ho++]=qo,qo=e,Go=t}function ea(e,t,r){Yo[$o++]=Xo,Yo[$o++]=Zo,Yo[$o++]=Qo,Qo=e;var n=Xo;e=Zo;var o=32-it(n)-1;n&=~(1<<o),r+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(n&(1<<i)-1).toString(32),n>>=i,o-=i,Xo=1<<32-it(t)+o|r<<o|n,Zo=a+e}else Xo=1<<a|r<<o|n,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function ra(e){for(;e===qo;)qo=Do[--Ho],Do[Ho]=null,Go=Do[--Ho],Do[Ho]=null;for(;e===Qo;)Qo=Yo[--$o],Yo[$o]=null,Zo=Yo[--$o],Yo[$o]=null,Xo=Yo[--$o],Yo[$o]=null}var na=null,oa=null,aa=!1,ia=null;function la(e,t){var r=Ru(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function sa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==Qo?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=Ru(18,null,null,0)).stateNode=t,r.return=e,e.child=r,na=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var r=t;if(!sa(e,t)){if(ua(e))throw Error(a(418));t=uo(r.nextSibling);var n=na;t&&sa(e,t)?la(n,r):(e.flags=-4097&e.flags|2,aa=!1,na=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,na=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function fa(e){if(e!==na)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ro(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}oa=null}}else oa=na?uo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ma(){oa=na=null,aa=!1}function ha(e){null===ia?ia=[e]:ia.push(e)}var va=_.ReactCurrentBatchConfig;function ba(e,t){if(e&&e.defaultProps){for(var r in t=M({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var ga=Ao(null),ya=null,_a=null,wa=null;function Sa(){wa=_a=ya=null}function ka(e){var t=ga.current;Co(ga),e._currentValue=t}function Ea(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function Aa(e,t){ya=e,wa=_a=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(_l=!0),e.firstContext=null)}function Ca(e){var t=e._currentValue;if(wa!==e)if(e={context:e,memoizedValue:t,next:null},null===_a){if(null===ya)throw Error(a(308));_a=e,ya.dependencies={lanes:0,firstContext:e}}else _a=_a.next=e;return t}var xa=null;function Wa(e){null===xa?xa=[e]:xa.push(e)}function Ta(e,t,r,n){var o=t.interleaved;return null===o?(r.next=r,Wa(t)):(r.next=o.next,o.next=r),t.interleaved=r,Va(e,n)}function Va(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var Oa=!1;function Ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ka(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Pa(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&Ts)){var o=n.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),n.pending=t,Va(e,r)}return null===(o=n.interleaved)?(t.next=t,Wa(n)):(t.next=o.next,o.next=t),n.interleaved=t,Va(e,r)}function ja(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&r))){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,gt(e,r)}}function Ma(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function La(e,t,r,n){var o=e.updateQueue;Oa=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=l.lane,p=l.eventTime;if((n&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(f=t,p=r,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(p,d,f):m))break e;d=M({},d,f);break e;case 2:Oa=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(f=l).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Ms|=i,e.lanes=i,e.memoizedState=d}}function za(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!=typeof o)throw Error(a(191,o));o.call(n)}}}var Fa=(new n.Component).refs;function Ia(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:M({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var Ba={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=tu(),o=ru(e),a=Ka(n,o);a.payload=t,null!=r&&(a.callback=r),null!==(t=Pa(e,a,o))&&(nu(t,e,o,n),ja(t,e,o))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=tu(),o=ru(e),a=Ka(n,o);a.tag=1,a.payload=t,null!=r&&(a.callback=r),null!==(t=Pa(e,a,o))&&(nu(t,e,o,n),ja(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=tu(),n=ru(e),o=Ka(r,n);o.tag=2,null!=t&&(o.callback=t),null!==(t=Pa(e,o,n))&&(nu(t,e,n,r),ja(t,e,n))}};function Ua(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&sn(r,n)&&sn(o,a))}function Da(e,t,r){var n=!1,o=Wo,a=t.contextType;return"object"==typeof a&&null!==a?a=Ca(a):(o=No(t)?Oo:To.current,a=(n=null!=(n=t.contextTypes))?Ro(e,o):Wo),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ba,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Ba.enqueueReplaceState(t,t.state,null)}function qa(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=Fa,Ra(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ca(a):(a=No(t)?Oo:To.current,o.context=Ro(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ia(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ba.enqueueReplaceState(o,o.state,null),La(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ga(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(a(309));var n=r.stateNode}if(!n)throw Error(a(147,e));var o=n,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Fa&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!r._owner)throw Error(a(290,e))}return e}function Ya(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function $a(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ku(e,t)).index=0,e.sibling=null,e}function i(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,r,n){return null===t||6!==t.tag?((t=Lu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function u(e,t,r,n){var a=r.type;return a===k?d(e,t,r.props.children,n,r.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===R&&$a(a)===t.type)?((n=o(t,r.props)).ref=Ga(e,t,r),n.return=e,n):((n=Pu(r.type,r.key,r.props,null,e.mode,n)).ref=Ga(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=zu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function d(e,t,r,n,a){return null===t||7!==t.tag?((t=ju(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function f(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lu(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(r=Pu(t.type,t.key,t.props,null,e.mode,r)).ref=Ga(e,null,t),r.return=e,r;case S:return(t=zu(t,e.mode,r)).return=e,t;case R:return f(e,(0,t._init)(t._payload),r)}if(te(t)||P(t))return(t=ju(t,e.mode,r,null)).return=e,t;Ya(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==o?null:s(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return r.key===o?u(e,t,r,n):null;case S:return r.key===o?c(e,t,r,n):null;case R:return p(e,t,(o=r._init)(r._payload),n)}if(te(r)||P(r))return null!==o?null:d(e,t,r,n,null);Ya(e,r)}return null}function m(e,t,r,n,o){if("string"==typeof n&&""!==n||"number"==typeof n)return s(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return u(t,e=e.get(null===n.key?r:n.key)||null,n,o);case S:return c(t,e=e.get(null===n.key?r:n.key)||null,n,o);case R:return m(e,t,r,(0,n._init)(n._payload),o)}if(te(n)||P(n))return d(t,e=e.get(r)||null,n,o,null);Ya(t,n)}return null}function h(o,a,l,s){for(var u=null,c=null,d=a,h=a=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var b=p(o,d,l[h],s);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(o,d),a=i(b,a,h),null===c?u=b:c.sibling=b,c=b,d=v}if(h===l.length)return r(o,d),aa&&Jo(o,h),u;if(null===d){for(;h<l.length;h++)null!==(d=f(o,l[h],s))&&(a=i(d,a,h),null===c?u=d:c.sibling=d,c=d);return aa&&Jo(o,h),u}for(d=n(o,d);h<l.length;h++)null!==(v=m(d,o,h,l[h],s))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),a=i(v,a,h),null===c?u=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),aa&&Jo(o,h),u}function v(o,l,s,u){var c=P(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,h=l,v=l=0,b=null,g=s.next();null!==h&&!g.done;v++,g=s.next()){h.index>v?(b=h,h=null):b=h.sibling;var y=p(o,h,g.value,u);if(null===y){null===h&&(h=b);break}e&&h&&null===y.alternate&&t(o,h),l=i(y,l,v),null===d?c=y:d.sibling=y,d=y,h=b}if(g.done)return r(o,h),aa&&Jo(o,v),c;if(null===h){for(;!g.done;v++,g=s.next())null!==(g=f(o,g.value,u))&&(l=i(g,l,v),null===d?c=g:d.sibling=g,d=g);return aa&&Jo(o,v),c}for(h=n(o,h);!g.done;v++,g=s.next())null!==(g=m(h,o,v,g.value,u))&&(e&&null!==g.alternate&&h.delete(null===g.key?v:g.key),l=i(g,l,v),null===d?c=g:d.sibling=g,d=g);return e&&h.forEach((function(e){return t(o,e)})),aa&&Jo(o,v),c}return function e(n,a,i,s){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var u=i.key,c=a;null!==c;){if(c.key===u){if((u=i.type)===k){if(7===c.tag){r(n,c.sibling),(a=o(c,i.props.children)).return=n,n=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===R&&$a(u)===c.type){r(n,c.sibling),(a=o(c,i.props)).ref=Ga(n,c,i),a.return=n,n=a;break e}r(n,c);break}t(n,c),c=c.sibling}i.type===k?((a=ju(i.props.children,n.mode,s,i.key)).return=n,n=a):((s=Pu(i.type,i.key,i.props,null,n.mode,s)).ref=Ga(n,a,i),s.return=n,n=s)}return l(n);case S:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){r(n,a.sibling),(a=o(a,i.children||[])).return=n,n=a;break e}r(n,a);break}t(n,a),a=a.sibling}(a=zu(i,n.mode,s)).return=n,n=a}return l(n);case R:return e(n,a,(c=i._init)(i._payload),s)}if(te(i))return h(n,a,i,s);if(P(i))return v(n,a,i,s);Ya(n,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(r(n,a.sibling),(a=o(a,i)).return=n,n=a):(r(n,a),(a=Lu(i,n.mode,s)).return=n,n=a),l(n)):r(n,a)}}var Xa=Qa(!0),Za=Qa(!1),Ja={},ei=Ao(Ja),ti=Ao(Ja),ri=Ao(Ja);function ni(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(xo(ri,t),xo(ti,e),xo(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Co(ei),xo(ei,t)}function ai(){Co(ei),Co(ti),Co(ri)}function ii(e){ni(ri.current);var t=ni(ei.current),r=se(t,e.type);t!==r&&(xo(ti,e),xo(ei,r))}function li(e){ti.current===e&&(Co(ei),Co(ti))}var si=Ao(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var fi=_.ReactCurrentDispatcher,pi=_.ReactCurrentBatchConfig,mi=0,hi=null,vi=null,bi=null,gi=!1,yi=!1,_i=0,wi=0;function Si(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function Ei(e,t,r,n,o,i){if(mi=i,hi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ll:sl,e=r(n,o),yi){i=0;do{if(yi=!1,_i=0,25<=i)throw Error(a(301));i+=1,bi=vi=null,t.updateQueue=null,fi.current=ul,e=r(n,o)}while(yi)}if(fi.current=il,t=null!==vi&&null!==vi.next,mi=0,bi=vi=hi=null,gi=!1,t)throw Error(a(300));return e}function Ai(){var e=0!==_i;return _i=0,e}function Ci(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===bi?hi.memoizedState=bi=e:bi=bi.next=e,bi}function xi(){if(null===vi){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===bi?hi.memoizedState:bi.next;if(null!==t)bi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===bi?hi.memoizedState=bi=e:bi=bi.next=e}return bi}function Wi(e,t){return"function"==typeof t?t(e):t}function Ti(e){var t=xi(),r=t.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=e;var n=vi,o=n.baseQueue,i=r.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}n.baseQueue=o=i,r.pending=null}if(null!==o){i=o.next,n=n.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((mi&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),n=c.hasEagerState?c.eagerState:e(n,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=f,l=n):u=u.next=f,hi.lanes|=d,Ms|=d}c=c.next}while(null!==c&&c!==i);null===u?l=n:u.next=s,ln(n,t.memoizedState)||(_l=!0),t.memoizedState=n,t.baseState=l,t.baseQueue=u,r.lastRenderedState=n}if(null!==(e=r.interleaved)){o=e;do{i=o.lane,hi.lanes|=i,Ms|=i,o=o.next}while(o!==e)}else null===o&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function Vi(e){var t=xi(),r=t.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,i=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ln(i,t.memoizedState)||(_l=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),r.lastRenderedState=i}return[i,n]}function Oi(){}function Ri(e,t){var r=hi,n=xi(),o=t(),i=!ln(n.memoizedState,o);if(i&&(n.memoizedState=o,_l=!0),n=n.queue,Di(Pi.bind(null,r,n,e),[e]),n.getSnapshot!==t||i||null!==bi&&1&bi.memoizedState.tag){if(r.flags|=2048,zi(9,Ki.bind(null,r,n,o,t),void 0,null),null===Vs)throw Error(a(349));0!=(30&mi)||Ni(r,t,o)}return o}function Ni(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function Ki(e,t,r,n){t.value=r,t.getSnapshot=n,ji(t)&&Mi(e)}function Pi(e,t,r){return r((function(){ji(t)&&Mi(e)}))}function ji(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!ln(e,r)}catch(e){return!0}}function Mi(e){var t=Va(e,1);null!==t&&nu(t,e,1,-1)}function Li(e){var t=Ci();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Wi,lastRenderedState:e},t.queue=e,e=e.dispatch=rl.bind(null,hi,e),[t.memoizedState,e]}function zi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=hi.updateQueue)?(t={lastEffect:null,stores:null},hi.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function Fi(){return xi().memoizedState}function Ii(e,t,r,n){var o=Ci();hi.flags|=e,o.memoizedState=zi(1|t,r,void 0,void 0===n?null:n)}function Bi(e,t,r,n){var o=xi();n=void 0===n?null:n;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==n&&ki(n,i.deps))return void(o.memoizedState=zi(t,r,a,n))}hi.flags|=e,o.memoizedState=zi(1|t,r,a,n)}function Ui(e,t){return Ii(8390656,8,e,t)}function Di(e,t){return Bi(2048,8,e,t)}function Hi(e,t){return Bi(4,2,e,t)}function qi(e,t){return Bi(4,4,e,t)}function Gi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yi(e,t,r){return r=null!=r?r.concat([e]):null,Bi(4,4,Gi.bind(null,t,e),r)}function $i(){}function Qi(e,t){var r=xi();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ki(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Xi(e,t){var r=xi();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ki(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Zi(e,t,r){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,_l=!0),e.memoizedState=r):(ln(r,t)||(r=ht(),hi.lanes|=r,Ms|=r,e.baseState=!0),t)}function Ji(e,t){var r=yt;yt=0!==r&&4>r?r:4,e(!0);var n=pi.transition;pi.transition={};try{e(!1),t()}finally{yt=r,pi.transition=n}}function el(){return xi().memoizedState}function tl(e,t,r){var n=ru(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},nl(e)?ol(t,r):null!==(r=Ta(e,t,r,n))&&(nu(r,e,n,tu()),al(r,t,n))}function rl(e,t,r){var n=ru(e),o={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(nl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,r);if(o.hasEagerState=!0,o.eagerState=l,ln(l,i)){var s=t.interleaved;return null===s?(o.next=o,Wa(t)):(o.next=s.next,s.next=o),void(t.interleaved=o)}}catch(e){}null!==(r=Ta(e,t,o,n))&&(nu(r,e,n,o=tu()),al(r,t,n))}}function nl(e){var t=e.alternate;return e===hi||null!==t&&t===hi}function ol(e,t){yi=gi=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function al(e,t,r){if(0!=(4194240&r)){var n=t.lanes;r|=n&=e.pendingLanes,t.lanes=r,gt(e,r)}}var il={readContext:Ca,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},ll={readContext:Ca,useCallback:function(e,t){return Ci().memoizedState=[e,void 0===t?null:t],e},useContext:Ca,useEffect:Ui,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,Ii(4194308,4,Gi.bind(null,t,e),r)},useLayoutEffect:function(e,t){return Ii(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ii(4,2,e,t)},useMemo:function(e,t){var r=Ci();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Ci();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=tl.bind(null,hi,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ci().memoizedState=e},useState:Li,useDebugValue:$i,useDeferredValue:function(e){return Ci().memoizedState=e},useTransition:function(){var e=Li(!1),t=e[0];return e=Ji.bind(null,e[1]),Ci().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=hi,o=Ci();if(aa){if(void 0===r)throw Error(a(407));r=r()}else{if(r=t(),null===Vs)throw Error(a(349));0!=(30&mi)||Ni(n,t,r)}o.memoizedState=r;var i={value:r,getSnapshot:t};return o.queue=i,Ui(Pi.bind(null,n,i,e),[e]),n.flags|=2048,zi(9,Ki.bind(null,n,i,r,t),void 0,null),r},useId:function(){var e=Ci(),t=Vs.identifierPrefix;if(aa){var r=Zo;t=":"+t+"R"+(r=(Xo&~(1<<32-it(Xo)-1)).toString(32)+r),0<(r=_i++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=wi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:Ca,useCallback:Qi,useContext:Ca,useEffect:Di,useImperativeHandle:Yi,useInsertionEffect:Hi,useLayoutEffect:qi,useMemo:Xi,useReducer:Ti,useRef:Fi,useState:function(){return Ti(Wi)},useDebugValue:$i,useDeferredValue:function(e){return Zi(xi(),vi.memoizedState,e)},useTransition:function(){return[Ti(Wi)[0],xi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ri,useId:el,unstable_isNewReconciler:!1},ul={readContext:Ca,useCallback:Qi,useContext:Ca,useEffect:Di,useImperativeHandle:Yi,useInsertionEffect:Hi,useLayoutEffect:qi,useMemo:Xi,useReducer:Vi,useRef:Fi,useState:function(){return Vi(Wi)},useDebugValue:$i,useDeferredValue:function(e){var t=xi();return null===vi?t.memoizedState=e:Zi(t,vi.memoizedState,e)},useTransition:function(){return[Vi(Wi)[0],xi().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ri,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var r="",n=t;do{r+=I(n),n=n.return}while(n);var o=r}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function dl(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,r){(r=Ka(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Hs||(Hs=!0,qs=n),fl(0,t)},r}function hl(e,t,r){(r=Ka(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return n(o)},r.callback=function(){fl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){fl(0,t),"function"!=typeof n&&(null===Gs?Gs=new Set([this]):Gs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}function vl(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new pl;var o=new Set;n.set(t,o)}else void 0===(o=n.get(t))&&(o=new Set,n.set(t,o));o.has(r)||(o.add(r),e=Cu.bind(null,e,t,r),t.then(e,e))}function bl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,r,n,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=Ka(-1,1)).tag=2,Pa(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var yl=_.ReactCurrentOwner,_l=!1;function wl(e,t,r,n){t.child=null===e?Za(t,null,r,n):Xa(t,e.child,r,n)}function Sl(e,t,r,n,o){r=r.render;var a=t.ref;return Aa(t,o),n=Ei(e,t,r,n,a,o),r=Ai(),null===e||_l?(aa&&r&&ta(t),t.flags|=1,wl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function kl(e,t,r,n,o){if(null===e){var a=r.type;return"function"!=typeof a||Nu(a)||void 0!==a.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Pu(r.type,null,n,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,El(e,t,a,n,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((r=null!==(r=r.compare)?r:sn)(i,n)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Ku(a,n)).ref=t.ref,e.return=t,t.child=e}function El(e,t,r,n,o){if(null!==e){var a=e.memoizedProps;if(sn(a,n)&&e.ref===t.ref){if(_l=!1,t.pendingProps=n=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(_l=!0)}}return xl(e,t,r,n,o)}function Al(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xo(Ks,Ns),Ns|=r;else{if(0==(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xo(Ks,Ns),Ns|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==a?a.baseLanes:r,xo(Ks,Ns),Ns|=n}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,xo(Ks,Ns),Ns|=n;return wl(e,t,o,r),t.child}function Cl(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function xl(e,t,r,n,o){var a=No(r)?Oo:To.current;return a=Ro(t,a),Aa(t,o),r=Ei(e,t,r,n,a,o),n=Ai(),null===e||_l?(aa&&n&&ta(t),t.flags|=1,wl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Wl(e,t,r,n,o){if(No(r)){var a=!0;Mo(t)}else a=!1;if(Aa(t,o),null===t.stateNode)Dl(e,t),Da(t,r,n),qa(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=r.contextType;u="object"==typeof u&&null!==u?Ca(u):Ro(t,u=No(r)?Oo:To.current);var c=r.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==n||s!==u)&&Ha(t,i,n,u),Oa=!1;var f=t.memoizedState;i.state=f,La(t,n,i,o),s=t.memoizedState,l!==n||f!==s||Vo.current||Oa?("function"==typeof c&&(Ia(t,r,c,n),s=t.memoizedState),(l=Oa||Ua(t,r,l,n,f,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=s),i.props=n,i.state=s,i.context=u,n=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),n=!1)}else{i=t.stateNode,Na(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:ba(t.type,l),i.props=u,d=t.pendingProps,f=i.context,s="object"==typeof(s=r.contextType)&&null!==s?Ca(s):Ro(t,s=No(r)?Oo:To.current);var p=r.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&Ha(t,i,n,s),Oa=!1,f=t.memoizedState,i.state=f,La(t,n,i,o);var m=t.memoizedState;l!==d||f!==m||Vo.current||Oa?("function"==typeof p&&(Ia(t,r,p,n),m=t.memoizedState),(u=Oa||Ua(t,r,u,n,f,m,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=m),i.props=n,i.state=m,i.context=s,n=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),n=!1)}return Tl(e,t,r,n,a,o)}function Tl(e,t,r,n,o,a){Cl(e,t);var i=0!=(128&t.flags);if(!n&&!i)return o&&Lo(t,r,!1),Hl(e,t,a);n=t.stateNode,yl.current=t;var l=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):wl(e,t,l,a),t.memoizedState=n.state,o&&Lo(t,r,!0),t.child}function Vl(e){var t=e.stateNode;t.pendingContext?Po(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Po(0,t.context,!1),oi(e,t.containerInfo)}function Ol(e,t,r,n,o){return ma(),ha(o),t.flags|=256,wl(e,t,r,n),t.child}var Rl,Nl,Kl,Pl,jl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ll(e,t,r){var n,o=t.pendingProps,i=si.current,l=!1,s=0!=(128&t.flags);if((n=s)||(n=(null===e||null!==e.memoizedState)&&0!=(2&i)),n?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xo(si,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=o.children,e=o.fallback,l?(o=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Mu(s,o,0,null),e=ju(e,o,r,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(r),t.memoizedState=jl,e):zl(t,s));if(null!==(i=e.memoizedState)&&null!==(n=i.dehydrated))return function(e,t,r,n,o,i,l){if(r)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,n=dl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=n.fallback,o=t.mode,n=Mu({mode:"visible",children:n.children},o,0,null),(i=ju(i,o,l,null)).flags|=2,n.return=t,i.return=t,n.sibling=i,t.child=n,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=jl,i);if(0==(1&t.mode))return Fl(e,t,l,null);if("$!"===o.data){if(n=o.nextSibling&&o.nextSibling.dataset)var s=n.dgst;return n=s,Fl(e,t,l,n=dl(i=Error(a(419)),n,void 0))}if(s=0!=(l&e.childLanes),_l||s){if(null!==(n=Vs)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(n.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Va(e,o),nu(n,e,o,-1))}return vu(),Fl(e,t,l,n=dl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Wu.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),na=t,aa=!0,ia=null,null!==e&&(Yo[$o++]=Xo,Yo[$o++]=Zo,Yo[$o++]=Qo,Xo=e.id,Zo=e.overflow,Qo=t),(t=zl(t,n.children)).flags|=4096,t)}(e,t,s,o,n,i,r);if(l){l=o.fallback,s=t.mode,n=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&s)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Ku(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==n?l=Ku(n,l):(l=ju(l,s,r,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,s=null===(s=e.child.memoizedState)?Ml(r):{baseLanes:s.baseLanes|r,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~r,t.memoizedState=jl,o}return e=(l=e.child).sibling,o=Ku(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=r),o.return=t,o.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,r,n){return null!==n&&ha(n),Xa(t,e.child,null,r),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Il(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Ea(e.return,t,r)}function Bl(e,t,r,n,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=n,a.tail=r,a.tailMode=o)}function Ul(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(wl(e,t,n.children,r),0!=(2&(n=si.current)))n=1&n|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Il(e,r,t);else if(19===e.tag)Il(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(xo(si,n),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===ui(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Bl(t,!1,o,r,a);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Bl(t,!0,r,null,a);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Dl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Ms|=t.lanes,0==(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(r=Ku(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Ku(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function ql(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Gl(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var o=e.child;null!==o;)r|=o.lanes|o.childLanes,n|=14680064&o.subtreeFlags,n|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)r|=o.lanes|o.childLanes,n|=o.subtreeFlags,n|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function Yl(e,t,r){var n=t.pendingProps;switch(ra(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Gl(t),null;case 1:case 17:return No(t.type)&&Ko(),Gl(t),null;case 3:return n=t.stateNode,ai(),Co(Vo),Co(To),di(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Nl(e,t),Gl(t),null;case 5:li(t);var o=ni(ri.current);if(r=t.type,null!==e&&null!=t.stateNode)Kl(e,t,r,n,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(a(166));return Gl(t),null}if(e=ni(ei.current),fa(t)){n=t.stateNode,r=t.type;var i=t.memoizedProps;switch(n[po]=t,n[mo]=i,e=0!=(1&t.mode),r){case"dialog":zn("cancel",n),zn("close",n);break;case"iframe":case"object":case"embed":zn("load",n);break;case"video":case"audio":for(o=0;o<Pn.length;o++)zn(Pn[o],n);break;case"source":zn("error",n);break;case"img":case"image":case"link":zn("error",n),zn("load",n);break;case"details":zn("toggle",n);break;case"input":Q(n,i),zn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!i.multiple},zn("invalid",n);break;case"textarea":oe(n,i),zn("invalid",n)}for(var s in ge(r,i),o=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?n.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zn(n.textContent,u,e),o=["children",u]):"number"==typeof u&&n.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zn(n.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&zn("scroll",n)}switch(r){case"input":q(n),J(n,i,!0);break;case"textarea":q(n),ie(n);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(n.onclick=Jn)}n=o,t.updateQueue=n,null!==n&&(t.flags|=4)}else{s=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=s.createElement(r,{is:n.is}):(e=s.createElement(r),"select"===r&&(s=e,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):e=s.createElementNS(e,r),e[po]=t,e[mo]=n,Rl(e,t,!1,!1),t.stateNode=e;e:{switch(s=ye(r,n),r){case"dialog":zn("cancel",e),zn("close",e),o=n;break;case"iframe":case"object":case"embed":zn("load",e),o=n;break;case"video":case"audio":for(o=0;o<Pn.length;o++)zn(Pn[o],e);o=n;break;case"source":zn("error",e),o=n;break;case"img":case"image":case"link":zn("error",e),zn("load",e),o=n;break;case"details":zn("toggle",e),o=n;break;case"input":Q(e,n),o=$(e,n),zn("invalid",e);break;case"option":default:o=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},o=M({},n,{value:void 0}),zn("invalid",e);break;case"textarea":oe(e,n),o=ne(e,n),zn("invalid",e)}for(i in ge(r,o),u=o)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ve(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==r||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&zn("scroll",e):null!=c&&y(e,i,c,s))}switch(r){case"input":q(e),J(e,n,!1);break;case"textarea":q(e),ie(e);break;case"option":null!=n.value&&e.setAttribute("value",""+D(n.value));break;case"select":e.multiple=!!n.multiple,null!=(i=n.value)?re(e,!!n.multiple,i,!1):null!=n.defaultValue&&re(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jn)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Gl(t),null;case 6:if(e&&null!=t.stateNode)Pl(e,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(a(166));if(r=ni(ri.current),ni(ei.current),fa(t)){if(n=t.stateNode,r=t.memoizedProps,n[po]=t,(i=n.nodeValue!==r)&&null!==(e=na))switch(e.tag){case 3:Zn(n.nodeValue,r,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zn(n.nodeValue,r,0!=(1&e.mode))}i&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[po]=t,t.stateNode=n}return Gl(t),null;case 13:if(Co(si),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ma(),t.flags|=98560,i=!1;else if(i=fa(t),null!==n&&null!==n.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ma(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gl(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=r,t):((n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&si.current)?0===Ps&&(Ps=3):vu())),null!==t.updateQueue&&(t.flags|=4),Gl(t),null);case 4:return ai(),Nl(e,t),null===e&&Bn(t.stateNode.containerInfo),Gl(t),null;case 10:return ka(t.type._context),Gl(t),null;case 19:if(Co(si),null===(i=t.memoizedState))return Gl(t),null;if(n=0!=(128&t.flags),null===(s=i.rendering))if(n)ql(i,!1);else{if(0!==Ps||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ui(e))){for(t.flags|=128,ql(i,!1),null!==(n=s.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)e=n,(i=r).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return xo(si,1&si.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Us&&(t.flags|=128,n=!0,ql(i,!1),t.lanes=4194304)}else{if(!n)if(null!==(e=ui(s))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),ql(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!aa)return Gl(t),null}else 2*Xe()-i.renderingStartTime>Us&&1073741824!==r&&(t.flags|=128,n=!0,ql(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=i.last)?r.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,r=si.current,xo(si,n?1&r|2:1&r),t):(Gl(t),null);case 22:case 23:return fu(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&0!=(1&t.mode)?0!=(1073741824&Ns)&&(Gl(t),6&t.subtreeFlags&&(t.flags|=8192)):Gl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function $l(e,t){switch(ra(t),t.tag){case 1:return No(t.type)&&Ko(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Co(Vo),Co(To),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Co(si),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ma()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Co(si),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Rl=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Nl=function(){},Kl=function(e,t,r,n){var o=e.memoizedProps;if(o!==n){e=t.stateNode,ni(ei.current);var a,i=null;switch(r){case"input":o=$(e,o),n=$(e,n),i=[];break;case"select":o=M({},o,{value:void 0}),n=M({},n,{value:void 0}),i=[];break;case"textarea":o=ne(e,o),n=ne(e,n),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof n.onClick&&(e.onclick=Jn)}for(c in ge(r,n),r=null,o)if(!n.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var s=o[c];for(a in s)s.hasOwnProperty(a)&&(r||(r={}),r[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in n){var u=n[c];if(s=null!=o?o[c]:void 0,n.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(a in s)!s.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(r||(r={}),r[a]="");for(a in u)u.hasOwnProperty(a)&&s[a]!==u[a]&&(r||(r={}),r[a]=u[a])}else r||(i||(i=[]),i.push(c,r)),r=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&zn("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}r&&(i=i||[]).push("style",r);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Pl=function(e,t,r,n){r!==n&&(t.flags|=4)};var Ql=!1,Xl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function es(e,t){var r=e.ref;if(null!==r)if("function"==typeof r)try{r(null)}catch(r){Au(e,t,r)}else r.current=null}function ts(e,t,r){try{r()}catch(r){Au(e,t,r)}}var rs=!1;function ns(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var o=n=n.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&ts(t,r,a)}o=o.next}while(o!==n)}}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function as(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[mo],delete t[vo],delete t[bo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Jn));else if(4!==n&&null!==(e=e.child))for(us(e,t,r),e=e.sibling;null!==e;)us(e,t,r),e=e.sibling}function cs(e,t,r){var n=e.tag;if(5===n||6===n)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(cs(e,t,r),e=e.sibling;null!==e;)cs(e,t,r),e=e.sibling}var ds=null,fs=!1;function ps(e,t,r){for(r=r.child;null!==r;)ms(e,t,r),r=r.sibling}function ms(e,t,r){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,r)}catch(e){}switch(r.tag){case 5:Xl||es(r,t);case 6:var n=ds,o=fs;ds=null,ps(e,t,r),fs=o,null!==(ds=n)&&(fs?(e=ds,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):ds.removeChild(r.stateNode));break;case 18:null!==ds&&(fs?(e=ds,r=r.stateNode,8===e.nodeType?so(e.parentNode,r):1===e.nodeType&&so(e,r),Bt(e)):so(ds,r.stateNode));break;case 4:n=ds,o=fs,ds=r.stateNode.containerInfo,fs=!0,ps(e,t,r),ds=n,fs=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){o=n=n.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&ts(r,t,i),o=o.next}while(o!==n)}ps(e,t,r);break;case 1:if(!Xl&&(es(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){Au(r,t,e)}ps(e,t,r);break;case 21:ps(e,t,r);break;case 22:1&r.mode?(Xl=(n=Xl)||null!==r.memoizedState,ps(e,t,r),Xl=n):ps(e,t,r);break;default:ps(e,t,r)}}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new Zl),t.forEach((function(t){var n=Tu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function vs(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var o=r[n];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,fs=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,fs=!0;break e}s=s.return}if(null===ds)throw Error(a(160));ms(i,l,o),ds=null,fs=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Au(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)bs(t,e),t=t.sibling}function bs(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vs(t,e),gs(e),4&n){try{ns(3,e,e.return),os(3,e)}catch(t){Au(e,e.return,t)}try{ns(5,e,e.return)}catch(t){Au(e,e.return,t)}}break;case 1:vs(t,e),gs(e),512&n&&null!==r&&es(r,r.return);break;case 5:if(vs(t,e),gs(e),512&n&&null!==r&&es(r,r.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Au(e,e.return,t)}}if(4&n&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==r?r.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&X(o,i),ye(s,l);var c=ye(s,i);for(l=0;l<u.length;l+=2){var d=u[l],f=u[l+1];"style"===d?ve(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):y(o,d,f,c)}switch(s){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?re(o,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?re(o,!!i.multiple,i.defaultValue,!0):re(o,!!i.multiple,i.multiple?[]:"",!1))}o[mo]=i}catch(t){Au(e,e.return,t)}}break;case 6:if(vs(t,e),gs(e),4&n){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Au(e,e.return,t)}}break;case 3:if(vs(t,e),gs(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Au(e,e.return,t)}break;case 4:default:vs(t,e),gs(e);break;case 13:vs(t,e),gs(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Bs=Xe())),4&n&&hs(e);break;case 22:if(d=null!==r&&null!==r.memoizedState,1&e.mode?(Xl=(c=Xl)||d,vs(t,e),Xl=c):vs(t,e),gs(e),8192&n){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jl=e,d=e.child;null!==d;){for(f=Jl=d;null!==Jl;){switch(m=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:ns(4,p,p.return);break;case 1:es(p,p.return);var h=p.stateNode;if("function"==typeof h.componentWillUnmount){n=p,r=p.return;try{t=n,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Au(n,r,e)}}break;case 5:es(p,p.return);break;case 22:if(null!==p.memoizedState){Ss(f);continue}}null!==m?(m.return=p,Jl=m):Ss(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=f.stateNode,l=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=he("display",l))}catch(t){Au(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Au(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vs(t,e),gs(e),4&n&&hs(e);case 21:}}function gs(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(ls(r)){var n=r;break e}r=r.return}throw Error(a(160))}switch(n.tag){case 5:var o=n.stateNode;32&n.flags&&(fe(o,""),n.flags&=-33),cs(e,ss(e),o);break;case 3:case 4:var i=n.stateNode.containerInfo;us(e,ss(e),i);break;default:throw Error(a(161))}}catch(t){Au(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ys(e,t,r){Jl=e,_s(e,t,r)}function _s(e,t,r){for(var n=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&n){var i=null!==o.memoizedState||Ql;if(!i){var l=o.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Ql;var u=Xl;if(Ql=i,(Xl=s)&&!u)for(Jl=o;null!==Jl;)s=(i=Jl).child,22===i.tag&&null!==i.memoizedState?ks(o):null!==s?(s.return=i,Jl=s):ks(o);for(;null!==a;)Jl=a,_s(a,t,r),a=a.sibling;Jl=o,Ql=l,Xl=u}ws(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):ws(e)}}function ws(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var r=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||os(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!Xl)if(null===r)n.componentDidMount();else{var o=t.elementType===t.type?r.memoizedProps:ba(t.type,r.memoizedProps);n.componentDidUpdate(o,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&za(t,i,n);break;case 3:var l=t.updateQueue;if(null!==l){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}za(t,l,r)}break;case 5:var s=t.stateNode;if(null===r&&4&t.flags){r=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&r.focus();break;case"img":u.src&&(r.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Bt(f)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&as(t)}catch(e){Au(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(r=t.sibling)){r.return=t.return,Jl=r;break}Jl=t.return}}function Ss(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var r=t.sibling;if(null!==r){r.return=t.return,Jl=r;break}Jl=t.return}}function ks(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{os(4,t)}catch(e){Au(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var o=t.return;try{n.componentDidMount()}catch(e){Au(t,o,e)}}var a=t.return;try{as(t)}catch(e){Au(t,a,e)}break;case 5:var i=t.return;try{as(t)}catch(e){Au(t,i,e)}}}catch(e){Au(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Es,As=Math.ceil,Cs=_.ReactCurrentDispatcher,xs=_.ReactCurrentOwner,Ws=_.ReactCurrentBatchConfig,Ts=0,Vs=null,Os=null,Rs=0,Ns=0,Ks=Ao(0),Ps=0,js=null,Ms=0,Ls=0,zs=0,Fs=null,Is=null,Bs=0,Us=1/0,Ds=null,Hs=!1,qs=null,Gs=null,Ys=!1,$s=null,Qs=0,Xs=0,Zs=null,Js=-1,eu=0;function tu(){return 0!=(6&Ts)?Xe():-1!==Js?Js:Js=Xe()}function ru(e){return 0==(1&e.mode)?1:0!=(2&Ts)&&0!==Rs?Rs&-Rs:null!==va.transition?(0===eu&&(eu=ht()),eu):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function nu(e,t,r,n){if(50<Xs)throw Xs=0,Zs=null,Error(a(185));bt(e,r,n),0!=(2&Ts)&&e===Vs||(e===Vs&&(0==(2&Ts)&&(Ls|=r),4===Ps&&su(e,Rs)),ou(e,n),1===r&&0===Ts&&0==(1&t.mode)&&(Us=Xe()+500,Fo&&Uo()))}function ou(e,t){var r=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,s=o[i];-1===s?0!=(l&r)&&0==(l&n)||(o[i]=pt(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var n=ft(e,e===Vs?Rs:0);if(0===n)null!==r&&Ye(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(null!=r&&Ye(r),1===t)0===e.tag?function(e){Fo=!0,Bo(e)}(uu.bind(null,e)):Bo(uu.bind(null,e)),io((function(){0==(6&Ts)&&Uo()})),r=null;else{switch(_t(n)){case 1:r=Je;break;case 4:r=et;break;case 16:default:r=tt;break;case 536870912:r=nt}r=Vu(r,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function au(e,t){if(Js=-1,eu=0,0!=(6&Ts))throw Error(a(327));var r=e.callbackNode;if(ku()&&e.callbackNode!==r)return null;var n=ft(e,e===Vs?Rs:0);if(0===n)return null;if(0!=(30&n)||0!=(n&e.expiredLanes)||t)t=bu(e,n);else{t=n;var o=Ts;Ts|=2;var i=hu();for(Vs===e&&Rs===t||(Ds=null,Us=Xe()+500,pu(e,t));;)try{yu();break}catch(t){mu(e,t)}Sa(),Cs.current=i,Ts=o,null!==Os?t=0:(Vs=null,Rs=0,t=Ps)}if(0!==t){if(2===t&&0!==(o=mt(e))&&(n=o,t=iu(e,o)),1===t)throw r=js,pu(e,0),su(e,n),ou(e,Xe()),r;if(6===t)su(e,n);else{if(o=e.current.alternate,0==(30&n)&&!function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var o=r[n],a=o.getSnapshot;o=o.value;try{if(!ln(a(),o))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=bu(e,n))&&0!==(i=mt(e))&&(n=i,t=iu(e,i)),1===t))throw r=js,pu(e,0),su(e,n),ou(e,Xe()),r;switch(e.finishedWork=o,e.finishedLanes=n,t){case 0:case 1:throw Error(a(345));case 2:case 5:Su(e,Is,Ds);break;case 3:if(su(e,n),(130023424&n)===n&&10<(t=Bs+500-Xe())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=no(Su.bind(null,e,Is,Ds),t);break}Su(e,Is,Ds);break;case 4:if(su(e,n),(4194240&n)===n)break;for(t=e.eventTimes,o=-1;0<n;){var l=31-it(n);i=1<<l,(l=t[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Xe()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*As(n/1960))-n)){e.timeoutHandle=no(Su.bind(null,e,Is,Ds),n);break}Su(e,Is,Ds);break;default:throw Error(a(329))}}}return ou(e,Xe()),e.callbackNode===r?au.bind(null,e):null}function iu(e,t){var r=Fs;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=bu(e,t))&&(t=Is,Is=r,null!==t&&lu(t)),e}function lu(e){null===Is?Is=e:Is.push.apply(Is,e)}function su(e,t){for(t&=~zs,t&=~Ls,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-it(t),n=1<<r;e[r]=-1,t&=~n}}function uu(e){if(0!=(6&Ts))throw Error(a(327));ku();var t=ft(e,0);if(0==(1&t))return ou(e,Xe()),null;var r=bu(e,t);if(0!==e.tag&&2===r){var n=mt(e);0!==n&&(t=n,r=iu(e,n))}if(1===r)throw r=js,pu(e,0),su(e,t),ou(e,Xe()),r;if(6===r)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e,Is,Ds),ou(e,Xe()),null}function cu(e,t){var r=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=r)&&(Us=Xe()+500,Fo&&Uo())}}function du(e){null!==$s&&0===$s.tag&&0==(6&Ts)&&ku();var t=Ts;Ts|=1;var r=Ws.transition,n=yt;try{if(Ws.transition=null,yt=1,e)return e()}finally{yt=n,Ws.transition=r,0==(6&(Ts=t))&&Uo()}}function fu(){Ns=Ks.current,Co(Ks)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,oo(r)),null!==Os)for(r=Os.return;null!==r;){var n=r;switch(ra(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&Ko();break;case 3:ai(),Co(Vo),Co(To),di();break;case 5:li(n);break;case 4:ai();break;case 13:case 19:Co(si);break;case 10:ka(n.type._context);break;case 22:case 23:fu()}r=r.return}if(Vs=e,Os=e=Ku(e.current,null),Rs=Ns=t,Ps=0,js=null,zs=Ls=Ms=0,Is=Fs=null,null!==xa){for(t=0;t<xa.length;t++)if(null!==(n=(r=xa[t]).interleaved)){r.interleaved=null;var o=n.next,a=r.pending;if(null!==a){var i=a.next;a.next=o,n.next=i}r.pending=n}xa=null}return e}function mu(e,t){for(;;){var r=Os;try{if(Sa(),fi.current=il,gi){for(var n=hi.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}gi=!1}if(mi=0,bi=vi=hi=null,yi=!1,_i=0,xs.current=null,null===r||null===r.return){Ps=1,js=t,Os=null;break}e:{var i=e,l=r.return,s=r,u=t;if(t=Rs,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=bl(l);if(null!==m){m.flags&=-257,gl(m,l,s,0,t),1&m.mode&&vl(i,c,t),u=c;var h=(t=m).updateQueue;if(null===h){var v=new Set;v.add(u),t.updateQueue=v}else h.add(u);break e}if(0==(1&t)){vl(i,c,t),vu();break e}u=Error(a(426))}else if(aa&&1&s.mode){var b=bl(l);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),gl(b,l,s,0,t),ha(cl(u,s));break e}}i=u=cl(u,s),4!==Ps&&(Ps=2),null===Fs?Fs=[i]:Fs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,ml(0,u,t));break e;case 1:s=u;var g=i.type,y=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Gs||!Gs.has(y)))){i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,hl(i,s,t));break e}}i=i.return}while(null!==i)}wu(r)}catch(e){t=e,Os===r&&null!==r&&(Os=r=r.return);continue}break}}function hu(){var e=Cs.current;return Cs.current=il,null===e?il:e}function vu(){0!==Ps&&3!==Ps&&2!==Ps||(Ps=4),null===Vs||0==(268435455&Ms)&&0==(268435455&Ls)||su(Vs,Rs)}function bu(e,t){var r=Ts;Ts|=2;var n=hu();for(Vs===e&&Rs===t||(Ds=null,pu(e,t));;)try{gu();break}catch(t){mu(e,t)}if(Sa(),Ts=r,Cs.current=n,null!==Os)throw Error(a(261));return Vs=null,Rs=0,Ps}function gu(){for(;null!==Os;)_u(Os)}function yu(){for(;null!==Os&&!$e();)_u(Os)}function _u(e){var t=Es(e.alternate,e,Ns);e.memoizedProps=e.pendingProps,null===t?wu(e):Os=t,xs.current=null}function wu(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(r=Yl(r,t,Ns)))return void(Os=r)}else{if(null!==(r=$l(r,t)))return r.flags&=32767,void(Os=r);if(null===e)return Ps=6,void(Os=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Os=t);Os=t=e}while(null!==t);0===Ps&&(Ps=5)}function Su(e,t,r){var n=yt,o=Ws.transition;try{Ws.transition=null,yt=1,function(e,t,r,n){do{ku()}while(null!==$s);if(0!=(6&Ts))throw Error(a(327));r=e.finishedWork;var o=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var o=31-it(r),a=1<<o;t[o]=0,n[o]=-1,e[o]=-1,r&=~a}}(e,i),e===Vs&&(Os=Vs=null,Rs=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ys||(Ys=!0,Vu(tt,(function(){return ku(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=Ws.transition,Ws.transition=null;var l=yt;yt=1;var s=Ts;Ts|=4,xs.current=null,function(e,t){if(eo=Dt,pn(e=fn())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var o=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{r.nodeType,i.nodeType}catch(e){r=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var m;f!==r||0!==o&&3!==f.nodeType||(s=l+o),f!==i||0!==n&&3!==f.nodeType||(u=l+n),3===f.nodeType&&(l+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===r&&++c===o&&(s=l),p===i&&++d===n&&(u=l),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}r=-1===s||-1===u?null:{start:s,end:u}}else r=null}r=r||{start:0,end:0}}else r=null;for(to={focusedElem:e,selectionRange:r},Dt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var v=h.memoizedProps,b=h.memoizedState,g=t.stateNode,y=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:ba(t.type,v),b);g.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(a(163))}}catch(e){Au(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}h=rs,rs=!1}(e,r),bs(r,e),mn(to),Dt=!!eo,to=eo=null,e.current=r,ys(r,e,o),Qe(),Ts=s,yt=l,Ws.transition=i}else e.current=r;if(Ys&&(Ys=!1,$s=e,Qs=o),0===(i=e.pendingLanes)&&(Gs=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),ou(e,Xe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((o=t[r]).value,{componentStack:o.stack,digest:o.digest});if(Hs)throw Hs=!1,e=qs,qs=null,e;0!=(1&Qs)&&0!==e.tag&&ku(),0!=(1&(i=e.pendingLanes))?e===Zs?Xs++:(Xs=0,Zs=e):Xs=0,Uo()}(e,t,r,n)}finally{Ws.transition=o,yt=n}return null}function ku(){if(null!==$s){var e=_t(Qs),t=Ws.transition,r=yt;try{if(Ws.transition=null,yt=16>e?16:e,null===$s)var n=!1;else{if(e=$s,$s=null,Qs=0,0!=(6&Ts))throw Error(a(331));var o=Ts;for(Ts|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:ns(8,d,i)}var f=d.child;if(null!==f)f.return=d,Jl=f;else for(;null!==Jl;){var p=(d=Jl).sibling,m=d.return;if(is(d),d===c){Jl=null;break}if(null!==p){p.return=m,Jl=p;break}Jl=m}}}var h=i.alternate;if(null!==h){var v=h.child;if(null!==v){h.child=null;do{var b=v.sibling;v.sibling=null,v=b}while(null!==v)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:ns(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Jl=g;break e}Jl=i.return}}var y=e.current;for(Jl=y;null!==Jl;){var _=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==_)_.return=l,Jl=_;else e:for(l=y;null!==Jl;){if(0!=(2048&(s=Jl).flags))try{switch(s.tag){case 0:case 11:case 15:os(9,s)}}catch(e){Au(s,s.return,e)}if(s===l){Jl=null;break e}var w=s.sibling;if(null!==w){w.return=s.return,Jl=w;break e}Jl=s.return}}if(Ts=o,Uo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}n=!0}return n}finally{yt=r,Ws.transition=t}}return!1}function Eu(e,t,r){e=Pa(e,t=ml(0,t=cl(r,t),1),1),t=tu(),null!==e&&(bt(e,1,t),ou(e,t))}function Au(e,t,r){if(3===e.tag)Eu(e,e,r);else for(;null!==t;){if(3===t.tag){Eu(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Gs||!Gs.has(n))){t=Pa(t,e=hl(t,e=cl(r,e),1),1),e=tu(),null!==t&&(bt(t,1,e),ou(t,e));break}}t=t.return}}function Cu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&r,Vs===e&&(Rs&r)===r&&(4===Ps||3===Ps&&(130023424&Rs)===Rs&&500>Xe()-Bs?pu(e,0):zs|=r),ou(e,t)}function xu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var r=tu();null!==(e=Va(e,t))&&(bt(e,t,r),ou(e,r))}function Wu(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),xu(e,r)}function Tu(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,o=e.memoizedState;null!==o&&(r=o.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(a(314))}null!==n&&n.delete(t),xu(e,r)}function Vu(e,t){return Ge(e,t)}function Ou(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,t,r,n){return new Ou(e,t,r,n)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ku(e,t){var r=e.alternate;return null===r?((r=Ru(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Pu(e,t,r,n,o,i){var l=2;if(n=e,"function"==typeof e)Nu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return ju(r.children,o,i,t);case E:l=8,o|=8;break;case A:return(e=Ru(12,r,t,2|o)).elementType=A,e.lanes=i,e;case T:return(e=Ru(13,r,t,o)).elementType=T,e.lanes=i,e;case V:return(e=Ru(19,r,t,o)).elementType=V,e.lanes=i,e;case N:return Mu(r,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case x:l=9;break e;case W:l=11;break e;case O:l=14;break e;case R:l=16,n=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ru(l,r,t,o)).elementType=e,t.type=n,t.lanes=i,t}function ju(e,t,r,n){return(e=Ru(7,e,n,t)).lanes=r,e}function Mu(e,t,r,n){return(e=Ru(22,e,n,t)).elementType=N,e.lanes=r,e.stateNode={isHidden:!1},e}function Lu(e,t,r){return(e=Ru(6,e,null,t)).lanes=r,e}function zu(e,t,r){return(t=Ru(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,r,n,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=n,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Iu(e,t,r,n,o,a,i,l,s){return e=new Fu(e,t,r,l,s),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ru(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ra(a),e}function Bu(e){if(!e)return Wo;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(No(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var r=e.type;if(No(r))return jo(e,r,t)}return t}function Uu(e,t,r,n,o,a,i,l,s){return(e=Iu(r,n,!0,e,0,a,0,l,s)).context=Bu(null),r=e.current,(a=Ka(n=tu(),o=ru(r))).callback=null!=t?t:null,Pa(r,a,o),e.current.lanes=o,bt(e,o,n),ou(e,n),e}function Du(e,t,r,n){var o=t.current,a=tu(),i=ru(o);return r=Bu(r),null===t.context?t.context=r:t.pendingContext=r,(t=Ka(a,i)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=Pa(o,t,i))&&(nu(e,o,i,a),ja(e,o,i)),i}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Gu(e,t){qu(e,t),(e=e.alternate)&&qu(e,t)}Es=function(e,t,r){if(null!==e)if(e.memoizedProps!==t.pendingProps||Vo.current)_l=!0;else{if(0==(e.lanes&r)&&0==(128&t.flags))return _l=!1,function(e,t,r){switch(t.tag){case 3:Vl(t),ma();break;case 5:ii(t);break;case 1:No(t.type)&&Mo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,o=t.memoizedProps.value;xo(ga,n._currentValue),n._currentValue=o;break;case 13:if(null!==(n=t.memoizedState))return null!==n.dehydrated?(xo(si,1&si.current),t.flags|=128,null):0!=(r&t.child.childLanes)?Ll(e,t,r):(xo(si,1&si.current),null!==(e=Hl(e,t,r))?e.sibling:null);xo(si,1&si.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(128&e.flags)){if(n)return Ul(e,t,r);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),xo(si,si.current),n)break;return null;case 22:case 23:return t.lanes=0,Al(e,t,r)}return Hl(e,t,r)}(e,t,r);_l=0!=(131072&e.flags)}else _l=!1,aa&&0!=(1048576&t.flags)&&ea(t,Go,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Dl(e,t),e=t.pendingProps;var o=Ro(t,To.current);Aa(t,r),o=Ei(null,t,n,e,o,r);var i=Ai();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,No(n)?(i=!0,Mo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ra(t),o.updater=Ba,t.stateNode=o,o._reactInternals=t,qa(t,n,e,r),t=Tl(null,t,n,!0,i,r)):(t.tag=0,aa&&i&&ta(t),wl(null,t,o,r),t=t.child),t;case 16:n=t.elementType;e:{switch(Dl(e,t),e=t.pendingProps,n=(o=n._init)(n._payload),t.type=n,o=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===W)return 11;if(e===O)return 14}return 2}(n),e=ba(n,e),o){case 0:t=xl(null,t,n,e,r);break e;case 1:t=Wl(null,t,n,e,r);break e;case 11:t=Sl(null,t,n,e,r);break e;case 14:t=kl(null,t,n,ba(n.type,e),r);break e}throw Error(a(306,n,""))}return t;case 0:return n=t.type,o=t.pendingProps,xl(e,t,n,o=t.elementType===n?o:ba(n,o),r);case 1:return n=t.type,o=t.pendingProps,Wl(e,t,n,o=t.elementType===n?o:ba(n,o),r);case 3:e:{if(Vl(t),null===e)throw Error(a(387));n=t.pendingProps,o=(i=t.memoizedState).element,Na(e,t),La(t,n,null,r);var l=t.memoizedState;if(n=l.element,i.isDehydrated){if(i={element:n,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ol(e,t,n,r,o=cl(Error(a(423)),t));break e}if(n!==o){t=Ol(e,t,n,r,o=cl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),na=t,aa=!0,ia=null,r=Za(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(ma(),n===o){t=Hl(e,t,r);break e}wl(e,t,n,r)}t=t.child}return t;case 5:return ii(t),null===e&&ca(t),n=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,ro(n,o)?l=null:null!==i&&ro(n,i)&&(t.flags|=32),Cl(e,t),wl(e,t,l,r),t.child;case 6:return null===e&&ca(t),null;case 13:return Ll(e,t,r);case 4:return oi(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Xa(t,null,n,r):wl(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Sl(e,t,n,o=t.elementType===n?o:ba(n,o),r);case 7:return wl(e,t,t.pendingProps,r),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,xo(ga,n._currentValue),n._currentValue=l,null!==i)if(ln(i.value,l)){if(i.children===o.children&&!Vo.current){t=Hl(e,t,r);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===n){if(1===i.tag){(u=Ka(-1,r&-r)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=r,null!==(u=i.alternate)&&(u.lanes|=r),Ea(i.return,r,t),s.lanes|=r;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=r,null!==(s=l.alternate)&&(s.lanes|=r),Ea(l,r,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=t.pendingProps.children,Aa(t,r),n=n(o=Ca(o)),t.flags|=1,wl(e,t,n,r),t.child;case 14:return o=ba(n=t.type,t.pendingProps),kl(e,t,n,o=ba(n.type,o),r);case 15:return El(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:ba(n,o),Dl(e,t),t.tag=1,No(n)?(e=!0,Mo(t)):e=!1,Aa(t,r),Da(t,n,o),qa(t,n,o,r),Tl(null,t,n,!0,e,r);case 19:return Ul(e,t,r);case 22:return Al(e,t,r)}throw Error(a(156,t.tag))};var Yu="function"==typeof reportError?reportError:function(e){console.error(e)};function $u(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function ec(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hu(i);l.call(e)}}Du(t,i,e,o)}else i=function(e,t,r,n,o){if(o){if("function"==typeof n){var a=n;n=function(){var e=Hu(i);a.call(e)}}var i=Uu(t,n,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[ho]=i.current,Bn(8===e.nodeType?e.parentNode:e),du(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof n){var l=n;n=function(){var e=Hu(s);l.call(e)}}var s=Iu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=s,e[ho]=s.current,Bn(8===e.nodeType?e.parentNode:e),du((function(){Du(t,s,r,n)})),s}(r,t,e,o,n);return Hu(i)}Qu.prototype.render=$u.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Du(e,t,null,null)},Qu.prototype.unmount=$u.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Du(null,e,null,null)})),t[ho]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var r=0;r<Nt.length&&0!==t&&t<Nt[r].priority;r++);Nt.splice(r,0,e),0===r&&Mt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=dt(t.pendingLanes);0!==r&&(gt(t,1|r),ou(t,Xe()),0==(6&Ts)&&(Us=Xe()+500,Uo()))}break;case 13:du((function(){var t=Va(e,1);if(null!==t){var r=tu();nu(t,e,1,r)}})),Gu(e,1)}},St=function(e){if(13===e.tag){var t=Va(e,134217728);null!==t&&nu(t,e,134217728,tu()),Gu(e,134217728)}},kt=function(e){if(13===e.tag){var t=ru(e),r=Va(e,t);null!==r&&nu(r,e,t,tu()),Gu(e,t)}},Et=function(){return yt},At=function(e,t){var r=yt;try{return yt=e,t()}finally{yt=r}},Se=function(e,t,r){switch(t){case"input":if(Z(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=So(n);if(!o)throw Error(a(90));G(n),Z(n,o)}}}break;case"textarea":ae(e,r);break;case"select":null!=(t=r.value)&&re(e,!!r.multiple,t,!1)}},We=cu,Te=du;var tc={usingClientEntryPoint:!1,Events:[_o,wo,So,Ce,xe,cu]},rc={findFiberByHostInstance:yo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},nc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(nc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}(e,t,null,r)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var r=!1,n="",o=Yu;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Iu(e,1,!1,null,0,r,0,n,o),e[ho]=t.current,Bn(8===e.nodeType?e.parentNode:e),new $u(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,r){if(!Zu(t))throw Error(a(200));return ec(null,e,t,!0,r)},t.hydrateRoot=function(e,t,r){if(!Xu(e))throw Error(a(405));var n=null!=r&&r.hydratedSources||null,o=!1,i="",l=Yu;if(null!=r&&(!0===r.unstable_strictMode&&(o=!0),void 0!==r.identifierPrefix&&(i=r.identifierPrefix),void 0!==r.onRecoverableError&&(l=r.onRecoverableError)),t=Uu(t,null,e,1,null!=r?r:null,o,0,i,l),e[ho]=t.current,Bn(e),n)for(e=0;e<n.length;e++)o=(o=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,o]:t.mutableSourceEagerHydrationData.push(r,o);return new Qu(t)},t.render=function(e,t,r){if(!Zu(t))throw Error(a(200));return ec(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(a(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ho]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Zu(r))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,r,!1,n)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,r)=>{"use strict";var n=r(3935);t.createRoot=n.createRoot,t.hydrateRoot=n.hydrateRoot},3935:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(4448)},5251:(e,t,r)=>{"use strict";var n=r(7294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,r){var n,a={},u=null,c=null;for(n in void 0!==r&&(u=""+r),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)i.call(t,n)&&!s.hasOwnProperty(n)&&(a[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===a[n]&&(a[n]=t[n]);return{$$typeof:o,type:e,key:u,ref:c,props:a,_owner:l.current}}t.Fragment=a,t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var r=Symbol.for("react.element"),n=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function b(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}function g(){}function y(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var _=y.prototype=new g;_.constructor=y,h(_,b.prototype),_.isPureReactComponent=!0;var w=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,n){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=t[o]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===a[o]&&(a[o]=s[o]);return{$$typeof:r,type:e,key:i,ref:l,props:a,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var x=/\/+/g;function W(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case r:case n:s=!0}}if(s)return i=i(s=e),e=""===a?"."+W(s,0):a,w(i)?(o="",null!=e&&(o=e.replace(x,"$&/")+"/"),T(i,t,o,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(s=0,a=""===a?".":a+":",w(e))for(var u=0;u<e.length;u++){var c=a+W(l=e[u],u);s+=T(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=T(l=l.value,t,o,c=a+W(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function V(e,t,r){if(null==e)return e;var n=[],o=0;return T(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},N={transition:null},K={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:N,ReactCurrentOwner:k};t.Children={map:V,forEach:function(e,t,r){V(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return V(e,(function(){t++})),t},toArray:function(e){return V(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=o,t.Profiler=i,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=K,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=h({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)S.call(t,u)&&!E.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:r,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=N.transition;N.transition={};try{e()}finally{N.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,r){return R.current.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,r){return R.current.useReducer(e,t,r)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,r){return R.current.useSyncExternalStore(e,t,r)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},7294:(e,t,r)=>{"use strict";e.exports=r(2408)},5893:(e,t,r)=>{"use strict";e.exports=r(5251)},53:(e,t)=>{"use strict";function r(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,o=e[n];if(!(0<a(o,t)))break e;e[n]=t,e[r]=o,r=n}}function n(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length,i=o>>>1;n<i;){var l=2*(n+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,r))u<o&&0>a(c,s)?(e[n]=c,e[u]=r,n=u):(e[n]=s,e[l]=r,n=l);else{if(!(u<o&&0>a(c,r)))break e;e[n]=c,e[u]=r,n=u}}}return t}function a(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,m=!1,h=!1,v=!1,b="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=n(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,r(u,t)}t=n(c)}}function w(e){if(v=!1,_(e),!h)if(null!==n(u))h=!0,N(S);else{var t=n(c);null!==t&&K(w,t.startTime-e)}}function S(e,r){h=!1,v&&(v=!1,g(C),C=-1),m=!0;var a=p;try{for(_(r),f=n(u);null!==f&&(!(f.expirationTime>r)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=r);r=t.unstable_now(),"function"==typeof l?f.callback=l:f===n(u)&&o(u),_(r)}else o(u);f=n(u)}if(null!==f)var s=!0;else{var d=n(c);null!==d&&K(w,d.startTime-r),s=!1}return s}finally{f=null,p=a,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,A=null,C=-1,x=5,W=-1;function T(){return!(t.unstable_now()-W<x)}function V(){if(null!==A){var e=t.unstable_now();W=e;var r=!0;try{r=A(!0,e)}finally{r?k():(E=!1,A=null)}}else E=!1}if("function"==typeof y)k=function(){y(V)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,R=O.port2;O.port1.onmessage=V,k=function(){R.postMessage(null)}}else k=function(){b(V,0)};function N(e){A=e,E||(E=!0,k())}function K(e,r){C=b((function(){e(t.unstable_now())}),r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,N(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return n(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var r=p;p=t;try{return e()}finally{p=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=p;p=e;try{return t()}finally{p=r}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,r(c,e),null===n(u)&&e===n(c)&&(v?(g(C),C=-1):v=!0,K(w,a-i))):(e.sortIndex=l,r(u,e),h||m||(h=!0,N(S))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var r=p;p=t;try{return e.apply(this,arguments)}finally{p=r}}}},3840:(e,t,r)=>{"use strict";e.exports=r(53)}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=r(7294),t=r(745);const n={VKWebAppInit:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAddToFavorites:{delay:200,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAddToHomeScreen:{delay:200,isError:!1,platforms:["Android"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAddToHomeScreenInfo:{delay:200,isError:!1,platforms:["Android"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{is_feature_supported:!0,is_added_to_home_screen:!1}},VKWebAppAllowNotifications:{delay:200,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCheckAllowedScopes:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:[{scope:"friends",allowed:!0},{scope:"notify",allowed:!1}]}},VKWebAppClose:{delay:200,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{status:"success",payload:{name:"value"}}},VKWebAppGetFriends:{delay:1e3,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{users:[{id:743784479,sex:2,last_name:"Хомяк",first_name:"Сеня",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1"},{id:743784474,sex:2,last_name:"Рыжий",first_name:"Персик",photo_200:"https://sun1-91.userapi.com/s/v1/ig2/Dcf-SWu7nVYDDldq9oQegiC06VqsSa43-HpDxzPjrvFCUUk9nSevY2Uf9xzm0bxvLfgsTOH6XiiW-zeLcDhPDj_w.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1"},{id:743784479,sex:2,last_name:"Хомяк",first_name:"Сеня",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1"},{id:743784474,sex:2,last_name:"Рыжий",first_name:"Персик",photo_200:"https://sun1-91.userapi.com/s/v1/ig2/Dcf-SWu7nVYDDldq9oQegiC06VqsSa43-HpDxzPjrvFCUUk9nSevY2Uf9xzm0bxvLfgsTOH6XiiW-zeLcDhPDj_w.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1"},{id:743784479,sex:2,last_name:"Хомяк",first_name:"Сеня",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1"}]},notification:"В данном случае, это данные которые будут отображены в списке друзей. Метод вернет друзей которые были выбраны из списка"},VKWebAppShowStoryBox:{delay:200,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppShowStoryBoxLoadFinish",delay:2e3,data:{story_owner_id:743784474,story_id:456239018}},{subNameEvent:"VKWebAppShowStoryBoxLoadFailed",delay:2e3,isError:!0,data:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppGetUserInfo:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{id:30333918,first_name:"Сергей",last_name:"Качалка",sex:2,city:{id:2256,title:"Горловка"},country:{id:2,title:"Россия"},photo_100:"https://sun2.48276.userapi.com/s/v1/ig2/2t7v9IqVUtWrnnImSlnIk2FLsQCJcMwx9b59GhiKDSUYqNFcDw3ovuFKVkalHa1AbaoJ0anDc5B0h2FKfDqPgC54.jpg?size=50x0&quality=95&crop=844,315,668,668&ava=1",photo_200:"https://sun1.48276.userapi.com/s/v1/ig2/RuMLCh416kMFsk_Kb5RnKHQzd09YahWudN3A5u3hecfq0GImoPxuYl4phJc2rYtq-7rr3ERe6D_f8VASH86_Zkce.jpg?size=200x200&quality=95&crop=1,0,1278,1278&ava=1",timezone:3}},VKWebAppGetAuthToken:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{access_token:"safsaKJJKsdksk_dsfsd7asmsdaJGYKLMNmjHJbLnHKM",scope:""}},VKWebAppCopyText:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCheckNativeAds:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShowNativeAds:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCallAPIMethod:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{"photos.getWallUploadServer":{delay:30,isError:!1,error:{error_code:104,error_msg:"Not found",request_params:[{key:"v",value:"5.100"},{key:"method",value:"status.getImage"},{key:"oauth",value:"1"}]},data:{response:{album_id:-1444,upload_url:"https://pu.vk.com/c856312/ss2152/upload.php",user_id:30333918}}},"friends.get":{delay:30,isError:!1,error:{error_code:104,error_msg:"Not found",request_params:[{key:"v",value:"5.100"}]},data:{response:{count:5,items:[{id:743784479,track_code:"38c9e957E1M2rTOU4jFIK774VSbg_ia-T4En0wrTMZYVS-3GEZ5-OGqfAp7gYR5_iVajnBCWUao96EK9",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1",first_name:"Сеня",last_name:"Хомяк",can_access_closed:!0,is_closed:!1},{id:743784474,track_code:"38c9e957E1M2rTOU4jFIK774VSbg_ia-T4En0wrTMZYVS-3GEZ5-OGqfAp7gYR5_iVajnBCWUao96EK9",photo_200:"https://sun1-91.userapi.com/s/v1/ig2/Dcf-SWu7nVYDDldq9oQegiC06VqsSa43-HpDxzPjrvFCUUk9nSevY2Uf9xzm0bxvLfgsTOH6XiiW-zeLcDhPDj_w.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1",first_name:"Персик",last_name:"Рыжий",can_access_closed:!0,is_closed:!1},{id:743784479,track_code:"38c9e957E1M2rTOU4jFIK774VSbg_ia-T4En0wrTMZYVS-3GEZ5-OGqfAp7gYR5_iVajnBCWUao96EK9",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1",first_name:"Сеня2",last_name:"Хомяк2",can_access_closed:!0,is_closed:!1},{id:743784474,track_code:"38c9e957E1M2rTOU4jFIK774VSbg_ia-T4En0wrTMZYVS-3GEZ5-OGqfAp7gYR5_iVajnBCWUao96EK9",photo_200:"https://sun1-91.userapi.com/s/v1/ig2/Dcf-SWu7nVYDDldq9oQegiC06VqsSa43-HpDxzPjrvFCUUk9nSevY2Uf9xzm0bxvLfgsTOH6XiiW-zeLcDhPDj_w.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1",first_name:"Персик2",last_name:"Рыжий2",can_access_closed:!0,is_closed:!1},{id:743784479,track_code:"38c9e957E1M2rTOU4jFIK774VSbg_ia-T4En0wrTMZYVS-3GEZ5-OGqfAp7gYR5_iVajnBCWUao96EK9",photo_200:"https://sun1-88.userapi.com/s/v1/ig2/ffZYc9qa-E8wPmfGsv-7erYVc83oWBUPeZjY0KSt7i7mkJ6y5YgwrNVs8K9E8TfCK8PuWXhu3l6O5cyCnlUSUCl3.jpg?size=200x200&quality=96&crop=26,26,204,204&ava=1",first_name:"Сеня3",last_name:"Хомяк3",can_access_closed:!0,is_closed:!1}]}}}}},VKWebAppDownloadFile:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShowOrderBox:{delay:200,isError:!1,platforms:["Android","Mobile Web","Web"],order:{url:"http://server/order",app_id:"1",user_id:743784479,api_secret:"VzHdjHBtZvxGeGfDrzMP",isTest:1},error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{success:!0}},VKWebAppDenyNotifications:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppGetClientVersion:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{platform:"web",version:"0.0",app:"vkclient",is_google_services_available:!0,client_user_agent:"SAK_1.93(com.vkontakte.android)/7.42-13967 (Android 12; SDK 31; arm64-v8a; samsung SM-A525F; ru; 2186x1080)",build:"app",is_new_navigation:!0,is_voice_assistant_available:!0,install_referrer:"com.android.vending",vk_client_exists:!0}},VKWebAppGetConfig:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{api_host:"api.vk.com",app_id:"8142709",appearance:"light",scheme:"vkcom_light",viewport_height:680,viewport_width:1258}},VKWebAppGetGrantedPermissions:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{permissions:["camera","location","photo","notifications"]}},VKWebAppGetLaunchParams:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{sign:"Hb67aIL4c2wsINenspCpKu3tUgac3422d41NCXX8zWL4",vk_access_token_settings:"",vk_app_id:1,vk_are_notifications_enabled:0,vk_is_app_user:1,vk_is_favorite:0,vk_language:"ru",vk_platform:"desktop_web",vk_ref:"other",vk_ts:1664886146,vk_user_id:743784479}},VKWebAppOpenApp:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppOpenCodeReader:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{code_data:"https://vk.com/persik_ryzhiy"}},VKWebAppOpenWallPost:{delay:30,isError:!1,platforms:["Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppSendToClient:{delay:30,isError:!1,platforms:["Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShare:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:[{post_id:8981}]}},VKWebAppShowImages:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShowWallPostBox:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{post_id:8982}},VKWebAppTranslate:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{texts:["Hi. How are you?","Did you get a chance to see the book I was writing?"],source_lang:"ru"}},VKWebAppTrackEvent:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppGetEmail:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{email:"persik_ryzhiy@mail.ru",sign:"lY_KLjwfRmx9X1_z4iowRz1pTKHL98PW-14XURLWKYI"}},VKWebAppGetGeodata:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{available:!0,lat:78.0217862,long:76.2881822,accuracy:15.024}},VKWebAppGetPersonalCard:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{phone:"79111234567",email:"persik_ryzhiy@mail.ru",address:{country:{id:1,name:"Россия"},city:{id:2,name:"Санкт-Петербург"},specified_address:"Невский пр., д. 28",postal_code:"191186"}}},VKWebAppGetPhoneNumber:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{sign:"YdUTMy8uAmFXUqzMsAUjYFTZ1cUfhRJBpTjmqgZBCtg",phone_number:"79111234567"}},VKWebAppOpenContacts:{delay:1e3,isError:!1,platforms:["Android","iOS"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppOpenContactsClosed",delay:20,data:{}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{contacts:[{phone:743784479,last_name:"Хомяк",first_name:"Сеня"},{phone:308546895,last_name:"Рыжий",first_name:"Персик"},{phone:47678720,last_name:"Хомяк второй",first_name:"Саня два"},{phone:218755213,last_name:"Рыжий второй",first_name:"Персик два"},{phone:3402347981,last_name:"Суслик",first_name:"Петя"}]},notification:"В данном случае, это данные которые будут отображены в списке друзей. Метод вернет друзей которые были выбраны из списка"},VKWebAppAddToCommunity:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{group_id:"166562603"}},VKWebAppAllowMessagesFromGroup:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppGetCommunityToken:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{access_token:"cc9521551d93ddb290b32648a37a006d87438a67f953dd37e564eb6db1ec28f79d05c16e207f00a0"}},VKWebAppGetGroupInfo:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{id:166562603,name:"VK Mini Apps",screen_name:"vkappsdev",is_closed:0,description:"Документация\n• VK Mini Apps и не только",members_count:52104,photo_50:"https://sun1-95.userapi.com/s/v1/if1/SrTI7tgAv79jphLz5OHUTFRzURtWS0axJCL1cSIFzI5p8Ja7iJm1dKN-4SiGEdQJQOiBENHX.jpg?size=50x50&quality=96&crop=100,100,599,599&ava=1",photo_100:"https://sun1-95.userapi.com/s/v1/if1/7R1EtxtmMuhQSfGVD4Vt5Bzeq5TqHgpCCYG0hDi3RsIwfdOEiCht65OC_q1qOx1vfZIVHbn5.jpg?size=100x100&quality=96&crop=100,100,599,599&ava=1",photo_200:"https://sun1-95.userapi.com/s/v1/if1/MTmSdynigJoHXdY0krbacTurak0PmEfuhkT0c1aIKnRhgACEi1v0je0guGvhnnc1rZnQ6sZb.jpg?size=200x200&quality=96&crop=100,100,599,599&ava=1",photo_400:"https://sun1-95.userapi.com/s/v1/if1/_pd7kU0FVnLSN_a_W8U77BFyGa_qmXK0lDTKlRVnelRfHbmKr0RroAEoZ0jtm5ypMZKj2lbq.jpg?size=200x200&quality=96&crop=26,26,748,748&ava=1",is_member:1}},VKWebAppJoinGroup:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppLeaveGroup:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppSendPayload:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShowCommunityWidgetPreviewBox:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppShowSlidesSheet:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,action:"confirm"}},VKWebAppAddToProfile:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{visibility:"best_friends"}},VKWebAppRemoveFromProfile:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppRecommend:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppSubscribeStoryApp:{delay:200,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{access_key:"..."}},VKWebAppShowBannerAd:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,banner_width:100,banner_height:64,banner_location:"top",layout_type:"resize"}},VKWebAppCheckBannerAd:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,banner_width:100,banner_height:64,banner_location:"top",layout_type:"resize"}},VKWebAppHideBannerAd:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,banner_width:100,banner_height:64,banner_location:"top",layout_type:"resize"}},VKWebAppConversionHit:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppRetargetingPixel:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAddToChat:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCallStart:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{join_link:"hg0IXLVD7txQyFKMTLt2Zy4P6HmuXxcKGcfF0A8GznU"}},VKWebAppCallJoin:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCallGetStatus:{delay:30,isError:!1,platforms:["Android","iOS","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{is_active:!1}},VKWebAppResizeWindow:{delay:30,isError:!1,platforms:["Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{width:800,height:1e3}},VKWebAppScroll:{delay:30,isError:!1,platforms:["Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{top:1,height:2040}},VKWebAppScrollTop:{delay:30,isError:!1,platforms:["Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{scrollTop:"100"}},VKWebAppSetLocation:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{}},VKWebAppSetSwipeSettings:{delay:30,isError:!1,platforms:["iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppSetViewSettings:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppStorageGet:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{keys:[{key:"example1",value:"example_value1"},{key:"example2",value:"example_value2"},{key:"example3",value:"example_value3"}]}},VKWebAppStorageGetKeys:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{keys:["example1","example2","example3"]}},VKWebAppStorageSet:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppTapticImpactOccurred:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppTapticNotificationOccurred:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppTapticSelectionChanged:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppFlashGetInfo:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{is_available:!0,level:.5}},VKWebAppFlashSetLevel:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAccelerometerStart:{delay:30,isError:!1,platforms:["Android","iOS"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppAccelerometerChanged",delay:30,data:{x:-.016759412,y:6.3302693,z:7.704541}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppAccelerometerStop:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppDeviceMotionStart:{delay:30,isError:!1,platforms:["Android","iOS"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppDeviceMotionChanged",delay:30,data:{x:-.016759412,y:6.3302693,z:7.704541}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppDeviceMotionStop:{delay:30,isError:!1,platforms:["Android","iOS"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppGyroscopeStart:{delay:30,isError:!1,platforms:["Android","iOS"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppAccelerometerChanged",delay:30,data:{x:-.016759412,y:6.3302693,z:7.704541}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}},VKWebAppCreateHash:{delay:30,isError:!1,platforms:["Android","iOS","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{sign:"m7TwcoveOwy4BE180UCTwyTkPApprYP81RjrOEuQcos",payload:"param1=value1;param2=value2",ts:1664541985}},VKWebAppShowSubscriptionBox:{delay:200,isError:!1,platforms:["Android","Mobile Web","Web"],order:{url:"http://server/order",app_id:"1",user_id:743784479,api_secret:"VzHdjHBtZvxGeGfDrzMP",status:"chargeable",cancel_reason:"user_decision",subscription_id:"25",next_bill_time:"0",pending_cancel:"0",isTest:1},error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{success:!0}},VKWebAppOpenPayForm:{delay:30,isError:!1,platforms:["Android","Mobile Web","Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{status:!0,transaction_id:"1234ABCD-EEEE-5678-90FG-ABCDEF123456",amount:"120.5",extra:'{"currency":"RUB","merchant_data":"some_merchant_data","merchant_sign":"some_sign","order_id":"some_order_id","ts":1641999488}"'}},VKWebAppScrollTopStart:{delay:30,isError:!1,platforms:["Web"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppScrollTop",delay:20,data:{scrollTop:0}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,scrollTop:"100"}},VKWebAppScrollTopStop:{delay:30,isError:!1,platforms:["Web"],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0,scrollTop:"100"}},VKWebAppGyroscopeStop:{delay:30,isError:!1,platforms:["Android","iOS"],defaultSubEvent:0,subEvents:[{subNameEvent:"VKWebAppAccelerometerChanged",delay:30,data:{x:-.016759412,y:6.3302693,z:7.704541}}],error:{error_type:"client_error",error_data:{error_code:4,error_reason:"User denied"}},data:{result:!0}}};function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return new Promise((async(t,r)=>{let o=n[e];const a=await chrome.storage.local.get(e);a[e]&&a[e].data&&(o=a[e]),o?t(o):r()}))}const a=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,r=arguments.length>2?arguments[2]:void 0,n=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;return new Promise((async(i,l)=>{const s=await o(e);let u=!1;void 0!==r&&"auto"!==r||(u=s.isError),"failed"===r&&(u=!0);let c="Result";"received"===r&&(c="Received"),"done"===r&&(c="Done"),"closed"===r&&(c="Closed");const d=u?`${e}Failed`:`${e}${c}`;let f=u?s.error:s.data;n&&(f=n);const p={type:d,data:{request_id:t.params.request_id,...f}};let m={type:d,data:{...f},handler:t.handler,isError:u};a&&(m={...m,...a}),window.postMessage(p,"*"),chrome.runtime.sendMessage(m),i({item:s,detail:p,addHistory:m})}))},i={VKWebAppChangeFragment:{delay:30,platforms:["Android","iOS","Mobile Web","Web"],data:{location:"fragment"}},VKWebAppLocationChanged:{delay:30,platforms:["Mobile Web","Web"],data:{location:"fragment"}},VKWebAppUpdateConfig:{delay:30,platforms:["Android","iOS","Mobile Web","Web"],data:{api_host:"api.vk.com",app_id:"8142709",appearance:"light",scheme:"vkcom_light",viewport_height:558,viewport_width:1258}},VKWebAppViewHide:{delay:30,platforms:["Android","iOS"],data:{}},VKWebAppViewRestore:{delay:30,platforms:["Android","iOS"],data:{}},VKWebAppBannerAdUpdated:{delay:30,platforms:["Android","iOS","Mobile Web","Web"],data:{result:!0,banner_width:100,banner_height:64,banner_location:"top",layout_type:"resize"}},VKWebAppBannerAdClosedByUser:{delay:30,platforms:["Android","iOS","Mobile Web","Web"],data:{banner_width:100,banner_height:64,banner_location:"top",layout_type:"resize"}},VKWebAppCallLeft:{delay:30,platforms:["Android","iOS","Web"],data:{reason:"general"}},VKWebAppCallFinished:{delay:30,platforms:["Android","iOS","Web"],data:{}}},l=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return new Promise((async(r,n)=>{let o=i[e];const a=await chrome.storage.local.get(e);a[e]&&a[e].data&&(o=a[e]);const l={type:e,data:{...o.data}},s={type:e,data:{...o.data},handler:e};chrome&&chrome.tabs&&chrome.tabs.sendMessage?chrome.tabs.sendMessage(chrome.devtools.inspectedWindow.tabId,{detail:l,addHistory:s,typeMessage:"imSender"}):(window.postMessage(l,"*"),t&&chrome.runtime.sendMessage(s)),r({detail:l,addHistory:s,typeMessage:"imSender"})}))};var s=r(5893);var u=r(3935);const c=t=>{let{children:r,loading:n}=t;const o=(0,e.useRef)(document.createElement("div"));return(0,e.useEffect)((()=>{const e=o.current;return document.body.appendChild(e),()=>{document.body.removeChild(e)}}),[]),u.createPortal((0,s.jsxs)("div",{className:"E9BTXbhNWJSHisjbG5Pc",children:[(0,s.jsx)("div",{className:"T9U_WolkkknTnaFBlEQW"}),n?(0,s.jsx)("div",{className:"E4VkHQUUO7nTRZgIXuLf",children:"Загрузка..."}):(0,s.jsx)("div",{className:"vkui--vkBase--dark",children:r})]}),o.current)},d=e=>{let{children:t}=e;return(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("div",{className:"XFmwgAMyTgwGu1EjRgKd",children:t})})};function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){f(e,t,r[t])}))}return e}function m(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function b(e,t,r){return t&&v(e.prototype,t),r&&v(e,r),e}var g,y=function(){function e(t){var r=t.content;h(this,e),f(this,"isMounted",!1),f(this,"node",void 0),this.node=function(e){var t=!!document.importNode,r=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(r,!0):r}(r)}return b(e,[{key:"id",get:function(){return this.node.id}},{key:"mount",value:function(e){return this.isMounted||(this.isMounted=!0,e.appendChild(this.node)),this.node}},{key:"unmount",value:function(){this.node&&this.node.parentNode&&(this.node.parentNode.removeChild(this.node),this.isMounted=!1)}}],[{key:"createFromExistingNode",value:function(t){var r=new e({content:""});return r.node=t,r}}]),e}(),_=e.createContext({}),w="http://www.w3.org/2000/svg",S=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h(this,e),f(this,"symbols",new Map),f(this,"config",{attrs:{xmlns:w,"xmlns:xlink":"http://www.w3.org/1999/xlink",style:"position:absolute;width:0;height:0","aria-hidden":"true"}}),f(this,"node",null),Object.assign(this.config.attrs,t.attrs)}return b(e,[{key:"push",value:function(e){var t=this.symbols,r=t.has(e.id);return t.set(e.id,e),!r}},{key:"add",value:function(e){var t=this.push(e);return this.node&&t&&e.mount(this.node),t}},{key:"attach",value:function(e){var t=this;this.node||(this.node=e,this.symbols.forEach((function(t){t.mount(e)})),e.querySelectorAll("symbol").forEach((function(e){var r=y.createFromExistingNode(e);t.add(r)})))}},{key:"mount",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.node||(this.node=this.render(),t&&e.childNodes[0]?e.insertBefore(this.node,e.firstChild):e.appendChild(this.node)),this.node}},{key:"render",value:function(){var e=document.createElementNS(w,"svg");return Object.entries(this.config.attrs).forEach((function(t){return e.setAttribute(t[0],t[1])})),this.symbols.forEach((function(t){return e.appendChild(t.node)})),e}},{key:"unmount",value:function(){this.node&&this.node.parentNode&&this.node.parentNode.removeChild(this.node)}}]),e}(),k=!("undefined"==typeof window||!window.document||!window.document.createElement);if(k){var E="__SVG_SPRITE_NODE__";g=new S({attrs:{id:E}});var A=function(){var e=document.getElementById(E);e?g.attach(e):g.mount(document.body),document.removeEventListener("DOMContentLoaded",A)};document.querySelector("body")?A():document.addEventListener("DOMContentLoaded",A)}else g=null;var C=k?e.useLayoutEffect:e.useEffect,x=function(t){var r=t.width,n=void 0===r?0:r,o=t.height,a=void 0===o?0:o,i=t.viewBox,l=t.id,s=t.className,u=void 0===s?"":s,c=t.fill,d=t.getRootRef,f=t.style,h=void 0===f?{}:f,v=t.title,b=t.children,g=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(t,["width","height","viewBox","id","className","fill","getRootRef","style","title","children"]),y=Math.max(n,a),w=e.useContext(_),S=function(e,t){for(var r=t.classPrefix,n=t.globalClasses,o="",a=0;a<e.length;a++)r&&(o+=" "+(r+e[a])),r&&!n||(o+=" "+e[a]);return o}(["Icon","Icon--".concat(y),"Icon--w-".concat(n),"Icon--h-".concat(a),"Icon--".concat(l)],w),k=p({width:n,height:a},h);return e.createElement("svg",m(p({"aria-hidden":"true",display:"block"},g),{className:"".concat(S," ").concat(u),viewBox:i,width:n,height:a,style:k,ref:d}),v&&e.createElement("title",null,v),e.createElement("use",{xlinkHref:"#".concat(l),style:{fill:"currentColor",color:c}},b))};function W(t,r,n,o,a,i,l,s){var u=function(){var e;c||(e=new y({content:o}),g&&g.add(e),c=!0)},c=!1,d=function(e){var t={};return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"warn";t[r]||(console[n]("[@vkontakte/icons][".concat(e,"] ").concat(r)),t[r]=!0)}}(t),f=function(t){if(C(u,[]),l){var o=s?". Замените на ".concat(s):"";d("Иконка устарела"+o)}return e.createElement(x,m(p({},t),{viewBox:n,id:r,width:void 0===t.width||isNaN(t.width)?a:+t.width,height:void 0===t.height||isNaN(t.height)?i:+t.height}))};return f.mountIcon=u,f.displayName=t,f}const T=W("Icon24Cancel","cancel_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" id="cancel_24"><path d="M7.536 6.264a.9.9 0 0 0-1.272 1.272L10.727 12l-4.463 4.464a.9.9 0 0 0 1.272 1.272L12 13.273l4.464 4.463a.9.9 0 1 0 1.272-1.272L13.273 12l4.463-4.464a.9.9 0 1 0-1.272-1.272L12 10.727 7.536 6.264Z" /></symbol>',24,24,!1,void 0),V=e=>{let{children:t,buttonsWrap:r,logo:n,subTitle:o,onClose:a}=e;return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("div",{className:"scp9UXQg0rEyAWmV9X6N",children:[a?(0,s.jsx)("div",{className:"fgjMMpxY_KC3YjXgS1Qt",children:(0,s.jsx)(T,{})}):null,n?(0,s.jsx)("div",{className:"KEFNO5apPR2IeewSXXE8"}):null,(0,s.jsxs)("div",{className:"gL6R1oDN_3i30o03OnK4",children:[t,o?(0,s.jsx)("div",{className:"PdhY6_ulFQbCIVi15Zgu",children:o}):null]}),(0,s.jsx)("div",{className:"XL6ybUl95waHls1VQffA",children:r||null})]})})},O={button:"Uv9Wt8dvKcPGa9mHAY5M","mode-primary":"XU6stvPmygpTtWEjB8Pq","mode-secondary":"aLYX4eUqSN1zNycsSBZP"},R=e=>{let{children:t,mode:r="primary",...n}=e;return(0,s.jsx)("div",{className:`${O.button} ${O["mode-"+r]}`,...n,children:t})};function N(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=[];return t.forEach((function(e){var t;if(e)switch(void 0===e?"undefined":(t=e)&&"undefined"!=typeof Symbol&&t.constructor===Symbol?"symbol":typeof t){case"string":n.push(e);break;case"object":Object.keys(e).forEach((function(t){e[t]&&n.push(t)}));break;default:n.push("".concat(e))}})),n.join(" ")}var K=function(){},P=function(e){if("string"!=typeof e)return{};if(!(e=e.trim().replace(/^[?#&]/,"")))return{};var t=/\?(.+)$/gi.exec(e);return(t?t[1]:e).split("&").reduce((function(e,t){var r=t.split("=");return r[1]&&(e[r[0]]=decodeURIComponent(r[1])),e}),{})};function j(e){return void 0!==e&&!1!==e&&null!==e&&""!==e}var M=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}();function L(e){e||(e=M?navigator.userAgent:"");var t=function(e){if(!M)return!1;var t=!/ipad|iphone|ipod/.test(e);return!(!/mac os/.test(e)||!t||"boolean"!=typeof navigator.standalone)}(e=e.toLowerCase()),r=t||-1!==e.indexOf("ipad"),n=!r&&-1!==e.search(/iphone|ipod/),o=n||r,a=o&&e.match(/os ([\d_]+) like mac os x/i),i=0,l=0;t?(i=13,l=0):a&&(i=+(a=a[1].split("_"))[0],l=+a[1]),a=null;var s=i<13&&!(11===i&&l<3),u=o&&function(e){if(!M)return!1;var t=window.webkit;if(t&&t.messageHandlers)return!0;var r=/constructor/i.test(String(window.HTMLElement)),n=!!window.indexedDB;if(-1===e.indexOf("safari")||-1===e.indexOf("version")||navigator.standalone)if(!n&&r||!window.statusbar||!window.statusbar.visible);else if(!r||n)return!0;return!1}(e),c=!1;return M&&(c=o&&375===screen.width&&812===screen.height&&3===window.devicePixelRatio),{isIPad:r,isIPhone:n,isIOS:o,isIPadOS:t,iosMajor:i,iosMinor:l,isWKWebView:u,isScrollBasedViewport:s,isIPhoneX:c,isIOSChrome:-1!==e.search(/crios/i)}}var z=L(),F=function(){return z.isIOS}(),I=function(){return z.isIPadOS}(),B=function(){var e={hasMouse:!1,hasTouchEvents:!1,hasHover:!1,hasTouch:!1};if(!M)return e;if(F&&!I)e.hasMouse=!1,e.hasHover=!1,e.hasTouchEvents=!0,e.hasTouch=!0;else if(e.hasTouchEvents="ontouchstart"in document,e.hasTouch=e.hasTouchEvents||"maxTouchPoints"in navigator&&navigator.maxTouchPoints>0,e.hasTouch){var t=!/android|mobile|tablet/i.test(navigator.userAgent);e.hasMouse="function"==typeof window.matchMedia&&window.matchMedia("(pointer)").matches?matchMedia("(pointer: fine)").matches:t,e.hasHover=e.hasMouse&&("function"==typeof window.matchMedia&&window.matchMedia("(hover)").matches?matchMedia("(hover: hover)").matches:t)}else e.hasMouse=!0,e.hasHover=!0;return e}(),U=function(){return B.hasMouse}(),D=function(){return B.hasHover}();if(M){var H=Element.prototype;H.matches||(H.matches=H.matchesSelector||H.webkitMatchesSelector||H.mozMatchesSelector||H.msMatchesSelector),H.closest||(H.closest=function(e){for(var t=this;t;){if(t.matches(e))return t;t=t.parentElement}return null})}function q(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function G(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){q(e,t,r[t])}))}return e}function Y(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function $(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(e,t){if(null==this)throw new TypeError('"this" is null or not defined');var r=Object(this),n=r.length>>>0;if(0===n)return!1;for(var o,a,i=0|t,l=Math.max(i>=0?i:n-Math.abs(i),0);l<n;){if((o=r[l])===(a=e)||"number"==typeof o&&"number"==typeof a&&isNaN(o)&&isNaN(a))return!0;l++}return!1}}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(e){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof e)throw new TypeError("callback must be a function");for(var t=Object(this),r=t.length>>>0,n=arguments[1],o=0;o<r;o++){var a=t[o];if(e.call(n,a,o,t))return a}}}),String.prototype.padStart||(String.prototype.padStart=function(e,t){return e>>=0,t=String(t||" "),this.length>e?String(this):((e-=this.length)>t.length&&(t+=t.repeat(e/t.length)),t.slice(0,e)+String(this))});var Q,X=e.createContext({}),Z=function(){return e.useContext(X)},J=r(3476),ee=r.n(J);!function(e){e.IOS="ios",e.UNKNOWN=""}(Q||(Q={}));var te,re={};!function(e){e.ANDROID="android",e.IOS="ios",e.VKCOM="vkcom"}(te||(te={}));var ne,oe={desktop_web:te.VKCOM},ae=M?function(e){try{var t=P(e).vk_platform;return"string"==typeof t&&t in oe?oe[t]:void 0}catch(e){return void console.warn(e)}}(location.search):void 0;!function(e){e.VKAPPS="vkapps",e.INTERNAL="internal"}(ne||(ne={}));var ie,le,se,ue,ce,de=e.createContext({webviewType:ne.VKAPPS,isWebView:ee().isWebView(),transitionMotionEnabled:!0,platform:ae||(ie||(ie=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(re[e])return re[e];var t=null,r=Q.UNKNOWN,n=L(e),o=n.isIOS,a=n.iosMajor,i=n.iosMinor;o&&(r=Q.IOS,t={major:a,minor:i});var l={userAgent:e,system:r,systemVersion:t};return re[e]=l,l}()),"ios"===ie.system?te.IOS:te.ANDROID),appearance:void 0,locale:"ru"}),fe=function(){return e.useContext(de)};function pe(){return fe().platform}!function(e){e[e.SMALL_MOBILE=1]="SMALL_MOBILE",e[e.MOBILE=2]="MOBILE",e[e.SMALL_TABLET=3]="SMALL_TABLET",e[e.TABLET=4]="TABLET",e[e.DESKTOP=5]="DESKTOP"}(le||(le={})),function(e){e[e.EXTRA_SMALL=1]="EXTRA_SMALL",e[e.SMALL=2]="SMALL",e[e.MEDIUM=3]="MEDIUM"}(se||(se={})),function(e){e.COMPACT="compact",e.REGULAR="regular"}(ue||(ue={})),q(ce={},le.SMALL_MOBILE,"smallMobileMinus"),q(ce,le.MOBILE,"mobile"),q(ce,le.SMALL_TABLET,"smallTablet"),q(ce,le.TABLET,"tablet"),q(ce,le.DESKTOP,"desktopPlus");const me=W("Icon16Spinner","spinner_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" id="spinner_16"><path fill="currentColor" fill-rule="evenodd" d="M11.21 2.93a6 6 0 0 0-8.64 7.62 1 1 0 1 1-1.8.86A8 8 0 1 1 8 16a1 1 0 1 1 0-2 6 6 0 0 0 3.21-11.07z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0),he=W("Icon24Spinner","spinner_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="spinner_24"><path fill="currentColor" fill-rule="evenodd" d="M16.394 5.077A8.2 8.2 0 0 0 4.58 15.49a.9.9 0 0 1-1.628.767A10 10 0 1 1 12 22a.9.9 0 0 1 0-1.8 8.2 8.2 0 0 0 4.394-15.123z" clip-rule="evenodd" /></symbol>',24,24,!1,void 0),ve=W("Icon32Spinner","spinner_32","0 0 32 32",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" id="spinner_32"><path fill="currentColor" d="M16 32a1.5 1.5 0 0 1 0-3c7.18 0 13-5.82 13-13S23.18 3 16 3 3 8.82 3 16c0 1.557.273 3.074.8 4.502A1.5 1.5 0 1 1 .986 21.54 15.97 15.97 0 0 1 0 16C0 7.163 7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Z" /></symbol>',32,32,!1,void 0),be=W("Icon44Spinner","spinner_44","0 0 44 44",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 44 44" id="spinner_44"><path fill="currentColor" d="M22 44a1.5 1.5 0 0 1 0-3c10.493 0 19-8.507 19-19S32.493 3 22 3 3 11.507 3 22c0 2.208.376 4.363 1.103 6.397a1.5 1.5 0 1 1-2.825 1.01A21.964 21.964 0 0 1 0 22C0 9.85 9.85 0 22 0s22 9.85 22 22-9.85 22-22 22Z" /></symbol>',44,44,!1,void 0);var ge=e.memo((function(t){var r=t.size,n=void 0===r?"regular":r,o=t["aria-label"],a=void 0===o?"Загружается...":o,i=t.className,l=$(t,["size","aria-label","className"]),s={small:me,regular:he,medium:ve,large:be}[n];return e.createElement("span",Y(G({role:"status","aria-label":a},l),{className:N("vkuiSpinner",i)}),e.createElement(s,{className:"vkuiSpinner__self"}))}));function ye(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _e(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function we(e,t){if(e){if("string"==typeof e)return _e(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_e(e,t):void 0}}function Se(e,t){return function(e){if(Array.isArray(e))return e}(e)||ye(e)||we(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ke(e){return function(e){if(Array.isArray(e))return _e(e)}(e)||ye(e)||we(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ee(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=Se(e.useState(t),2),n=r[0],o=r[1];return e.useEffect((function(){o(!0)}),[]),n}function Ae(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=e.useContext(X).hasPointer,n=void 0===r?U:r;if(Ee(!t))return n}function Ce(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var o=e.useRef(null);return e.useMemo((function(){return{get current(){return o.current},set current(e){o.current=e,r.forEach((function(t){t&&function(e,t){t&&("function"==typeof t?t(e):t.current=e)}(e,t)}))}}}),r)}ge.displayName="Spinner";var xe,We=e.createContext({portalRoot:null}),Te=M?e.useLayoutEffect:e.useEffect;function Ve(t,r){var n=e.useRef({cb:t,duration:r});Te((function(){n.current.cb=t,n.current.duration=r}),[t,r]);var o=e.useRef(),a=e.useCallback((function(){M&&(null==o?void 0:o.current)&&clearTimeout(o.current)}),[]),i=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.current.duration;a(),M&&(o.current=setTimeout((function(){var e=n.current.cb;"function"==typeof e&&e()}),e))}),[a]);return Te((function(){return a}),[]),{set:i,clear:a}}!function(e){e.ENTER="Enter",e.SPACE="Space",e.TAB="Tab",e.ESCAPE="Escape",e.HOME="Home",e.END="End",e.ARROW_LEFT="ArrowLeft",e.ARROW_RIGHT="ArrowRight",e.ARROW_DOWN="ArrowDown"}(xe||(xe={}));var Oe=[{code:xe.ENTER,key:["Enter"],keyCode:13},{code:xe.SPACE,key:["Space","Spacebar"," "],keyCode:32},{code:xe.TAB,key:["Tab"],keyCode:9},{code:xe.ESCAPE,key:["Escape"],keyCode:27},{code:xe.HOME,key:["Home"],keyCode:36},{code:xe.END,key:["End"],keyCode:35},{code:xe.ARROW_LEFT,key:["ArrowLeft"],keyCode:37},{code:xe.ARROW_RIGHT,key:["ArrowRight"],keyCode:39},{code:xe.ARROW_DOWN,key:["ArrowDown"],keyCode:40}];var Re=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return t.filter((function(e){return"function"==typeof e})).forEach((function(e){return e.apply(void 0,ke(r))}))}},Ne=function(e){return null!=e.clientX?e.clientX:e.changedTouches&&e.changedTouches[0].clientX},Ke=function(e){return null!=e.clientY?e.clientY:e.changedTouches&&e.changedTouches[0].clientY},Pe=function(){return M&&"ontouchstart"in window};function je(){return Pe()?["touchstart","touchmove","touchend","touchcancel"]:["mousedown","mousemove","mouseup","mouseleave"]}var Me=function(t){var r=t.visible,n=t.mode,o=t.thin;return e.createElement("span",{"aria-hidden":!0,className:N("vkuiFocusVisible",r&&"vkuiFocusVisible--visible",o&&"vkuiFocusVisible--thin",{inside:"vkuiFocusVisible--mode-inside",outside:"vkuiFocusVisible--mode-outside",outline:"vkuiFocusVisible--mode-outline"}[n])})};function Le(t,r,n){var o=e.useRef(r);Te((function(){o.current=r}),[r]);var a=e.useCallback((function(e){return o.current&&o.current(e)}),[]),i=e.useRef(K),l=e.useCallback((function(){i.current(),i.current=K}),[]),s=e.useCallback((function(e){if(M&&(l(),e)){var r=G({},n);e.addEventListener(t,a,r),i.current=function(){return e.removeEventListener(t,a,r)}}}),[n,a,t,l]);return e.useEffect((function(){return l}),[l]),e.useMemo((function(){return{add:s,remove:l}}),[s,l])}var ze=e.createContext({window:M?window:void 0,document:M?document:void 0}),Fe=function(){return e.useContext(ze)},Ie=function(t){var r=function(e){var t,r=null!==(t=R.current)&&void 0!==t?t:{},o=r.isPressed,a=r.isSlide,i=r.isSlideX,l=r.isSlideY;o&&N(e,[f,l&&m,i&&p]);var s=Pe();O.current=(!s||!a)&&Boolean(a),R.current={},s&&c&&c(e),n()},n=function(){z.forEach((function(e){return e.remove()}))},o=t.onStart,a=t.onStartX,i=t.onStartY,l=t.onMove,s=t.onMoveX,u=t.onMoveY,c=t.onLeave,d=t.onEnter,f=t.onEnd,p=t.onEndX,m=t.onEndY,h=t.onClickCapture,v=t.usePointerHover,b=t.slideThreshold,g=void 0===b?5:b,y=t.useCapture,_=void 0!==y&&y,w=t.Component,S=void 0===w?"div":w,k=t.getRootRef,E=t.noSlideClick,A=void 0!==E&&E,C=t.stopPropagation,x=void 0!==C&&C,W=$(t,["onStart","onStartX","onStartY","onMove","onMoveX","onMoveY","onLeave","onEnter","onEnd","onEndX","onEndY","onClickCapture","usePointerHover","slideThreshold","useCapture","Component","getRootRef","noSlideClick","stopPropagation"]),T=Fe().document,V=e.useMemo(je,[]),O=e.useRef(!1),R=e.useRef(null),N=function(e,t){x&&e.stopPropagation(),t.forEach((function(t){var r,n,o,a=Date.now()-(null!==(o=null===(r=R.current)||void 0===r||null===(n=r.startT)||void 0===n?void 0:n.getTime())&&void 0!==o?o:0);t&&t(Y(G({},R.current),{duration:a,originalEvent:e}))}))},K=Le(v?"pointerenter":"mouseenter",d),P=Le(v?"pointerleave":"mouseleave",c),j=Le(V[0],(function(e){var t;R.current={startX:Ne(e),startY:Ke(e),startT:new Date,duration:0,isPressed:!0,isY:!1,isX:!1,isSlideX:!1,isSlideY:!1,isSlide:!1,shiftX:0,shiftY:0,shiftXAbs:0,shiftYAbs:0},N(e,[o,a,i]),(t=Pe()?e.target:T)&&z.forEach((function(e){return e.add(t)}))}),{capture:_,passive:!1}),M=Ce(k);Te((function(){var e=M.current;e&&(K.add(e),P.add(e),j.add(e))}),[S]);var L={capture:_,passive:!1},z=[Le(V[1],(function(e){var t,n=null!==(t=R.current)&&void 0!==t?t:{},o=n.isPressed,a=n.isX,i=n.isY,c=n.startX,d=void 0===c?0:c,f=n.startY,p=void 0===f?0:f;if(o){var m,h=Ne(e)-d,v=Ke(e)-p,b=Math.abs(h),y=Math.abs(v);if(e.touches&&e.touches.length>1)return r(e);if(!a&&!i){var _=b>=g&&b>y,w=y>=g&&y>b,S=_&&(!!s||!!l),k=w&&(!!u||!!l);R.current&&Object.assign(R.current,{isY:w,isX:_,isSlideX:S,isSlideY:k,isSlide:S||k})}(null===(m=R.current)||void 0===m?void 0:m.isSlide)&&(Object.assign(R.current,{shiftX:h,shiftY:v,shiftXAbs:b,shiftYAbs:y}),N(e,[l,R.current.isSlideX&&s,R.current.isSlideY&&u]))}}),L),Le(V[2],r,L),Le(V[3],r,L)];return e.createElement(S,Y(G({},W),{onDragStart:function(e){var t=e.target;"A"!==t.tagName&&"IMG"!==t.tagName||e.preventDefault()},onClickCapture:function(e){if(!O.current)return h&&h(e);A?(e.stopPropagation(),e.preventDefault()):h&&h(e),O.current=!1},ref:M}))};const Be=e.createContext(!1);var Ue,De={none:"vkuiTappable--sizeX-none",compact:"vkuiTappable--sizeX-compact"},He=(Ue=Ue||new Map,function(e,t){var r=Ue.get(e);r?r.push(t):Ue.set(e,[t])}),qe=function(e,t){var r=Ue.get(e);r&&(t?r.splice(r.indexOf(t)>>>0,1):Ue.set(e,[]))},Ge=function(e,t){var r=Ue.get(e);r&&r.slice().map((function(e){e(t)})),(r=Ue.get("*"))&&r.slice().map((function(r){r(e,t)}))},Ye=e.createContext({onHoverChange:K});function $e(e){switch(e){case"opacity":case"background":return!0;default:return!1}}var Qe=function(t){var r=t.children,n=t.Component,o=t.onClick,a=t.onKeyDown,i=t.activeEffectDelay,l=void 0===i?600:i,s=t.stopPropagation,u=void 0!==s&&s,c=t.getRootRef,d=t.hasHover,f=void 0===d||d,p=t.hoverMode,m=void 0===p?"background":p,h=t.hasActive,v=void 0===h||h,b=t.activeMode,g=void 0===b?"background":b,y=t.focusVisibleMode,_=void 0===y?"inside":y,w=t.onEnter,S=t.onLeave,k=t.className,E=$(t,["children","Component","onClick","onKeyDown","activeEffectDelay","stopPropagation","getRootRef","hasHover","hoverMode","hasActive","activeMode","focusVisibleMode","onEnter","onLeave","className"]);n=n||(E.href?"a":"div");var A,C,x,W=e.useContext(Ye).onHoverChange,T=e.useContext(Be),V=pe(),O=(C=(A=Se((0,e.useState)(!1),2))[0],x=A[1],{focusVisible:(0,e.useContext)(We).keyboardInput&&C,onFocus:(0,e.useCallback)((function(e){e.stopPropagation(),x(!0)}),[x]),onBlur:(0,e.useCallback)((function(e){e.stopPropagation(),x(!1)}),[x])}),R=O.focusVisible,P=O.onBlur,j=O.onFocus,M=Z().sizeX,L=void 0===M?"none":M,z=Ae(),F=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],r=e.useContext(X).hasHover,n=void 0===r?D:r;if(Ee(!t))return n}(),I=Se(e.useState([]),2),B=I[0],U=I[1],H=Se(e.useState(!1),2),q=H[0],Q=H[1],J=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r=Se(e.useState(t),2),n=r[0],o=r[1],a=e.useCallback((function(){o(!0)}),[]),i=e.useCallback((function(){o(!1)}),[]),l=e.useCallback((function(){o(!n)}),[n]);return{value:n,setTrue:a,setFalse:i,toggle:l}}(!1),ee=J.value,re=J.setTrue,ne=J.setFalse,oe=ee&&!E.disabled,ae=v&&!q&&!E.disabled,ie=F&&f&&!q,le="a"!==n&&"button"!==n&&"label"!==n&&!E.contentEditable,se=$e(m),ce=$e(g),de=["inside","outside"].includes(_),fe=Se(function(t,r){var n=e.useMemo((function(){return Math.round(1e8*Math.random()).toString(16)}),[]),o=Se(e.useState(0),2),a=o[0],i=o[1],l=function(){return i(0)},s=function(){return t&&i(2)},u=Ve(s,70),c=Ve(l,r);return Te((function(){return 1===a?(u.set(),u.clear):3===a?c.clear:(2===a&&Ge("active",n),K)}),[a]),Te((function(){if(0===a)return K;var e=function(e){e!==n&&l()};return He("active",e),function(){return qe("active",e)}}),[0===a]),Te((function(){!t&&l()}),[t]),[a,{delayStart:function(){t&&i(1)},start:s,stop:function(e){if(e)return i(3),c.set(e);l()}}]}(ae,l),2),me=fe[0],he=fe[1],ve=he.start,be=he.stop,ge=he.delayStart,ye=2===me||3===me,_e=Ce(c),we=e.useRef({onHoverChange:Q}).current;Te((function(){return oe?(W(!0),function(){return W(!1)}):K}),[oe]);var Pe=V===te.ANDROID&&!z&&ae&&"background"===g,je=Ve((function(){return U([])}),225),Le=N(k,"vkuiTappable","vkuiInternalTappable",V===te.IOS&&"vkuiTappable--ios",L!==ue.REGULAR&&De[L],ie&&"vkuiTappable--hasHover",ae&&"vkuiTappable--hasActive",ie&&oe&&!se&&m,ae&&ye&&!ce&&g,R&&!de&&_,ie&&oe&&se&&{background:"vkuiTappable--hover-background",opacity:"vkuiTappable--hover-opacity"}[m],ae&&ye&&ce&&{background:"vkuiTappable--active-background",opacity:"vkuiTappable--active-opacity"}[g],R&&"vkuiTappable--focus-visible"),ze={onStart:Re((function(e){var t,r,n,o,a,i,l=e.originalEvent;if(ae){if(l.touches&&l.touches.length>1)return be();if(Pe){var s={top:null==(r=null==(t=_e.current)?void 0:t.getBoundingClientRect())?void 0:r.top,left:null==r?void 0:r.left,width:null==t?void 0:t.offsetWidth,height:null==t?void 0:t.offsetHeight},u=s.top,c=s.left;n=Ne(l)-(null!=c?c:0),o=Ke(l)-(null!=u?u:0),a=Date.now(),i=B.filter((function(e){return e.id+225>a})),U(ke(i).concat([{x:n,y:o,id:a}])),je.set()}ge()}}),E.onStart),onMove:Re((function(e){e.isSlide&&be()}),E.onMove),onEnd:Re((function(e){var t=e.duration;if(0!==me){1===me&&ve();var r=t-70;be(r>=100?0:l-r)}}),E.onEnd),onClick:o,onKeyDown:Re((function(e){var t;le&&function(e){var t=e.target,r=t.tagName,n=t.getAttribute("role"),o=!0!==t.isContentEditable&&"INPUT"!==r&&"TEXTAREA"!==r&&("button"===n||"link"===n),a="A"===r&&t.hasAttribute("href"),i=function(e){var t;return(null===(t=Oe.find((function(t){var r=t.key,n=t.keyCode;return r.includes(e.key)||n===e.keyCode})))||void 0===t?void 0:t.code)||null}(e);return o&&(i===xe.SPACE&&"button"===n||i===xe.ENTER&&!a)}(e)&&(e.preventDefault(),null===(t=_e.current)||void 0===t||t.click())}),a)},Fe=E.href?"link":"button";return e.createElement(Ie,G(Y(G({onEnter:Re(re,w),onLeave:Re(ne,S),type:"button"===n?"button":void 0,tabIndex:le&&!E.disabled?0:void 0,role:le?Fe:void 0,"aria-disabled":le?E.disabled:void 0,stopPropagation:u&&!T&&!E.disabled},E),{slideThreshold:20,usePointerHover:!0,className:Le,Component:n,getRootRef:_e,onBlur:Re(P,E.onBlur),onFocus:Re(j,E.onFocus)}),E.disabled?{}:ze),e.createElement(Ye.Provider,{value:we},r),Pe&&e.createElement("span",{"aria-hidden":!0,className:"vkuiTappable__waves"},B.map((function(t){return e.createElement("span",{key:t.id,className:"vkuiTappable__wave",style:{top:t.y,left:t.x}})}))),(ie&&"background"===m||ae&&"background"===g)&&e.createElement("span",{"aria-hidden":!0,className:"vkuiTappable__stateLayer"}),!E.disabled&&de&&e.createElement(Me,{visible:R,mode:_}))},Xe=q({none:"vkuiButton--sizeY-none"},ue.REGULAR,"vkuiButton--sizeY-regular"),Ze=function(t){var r=t.size,n=void 0===r?"s":r,o=t.mode,a=void 0===o?"primary":o,i=t.appearance,l=void 0===i?"accent":i,s=t.stretched,u=void 0!==s&&s,c=t.align,d=void 0===c?"center":c,f=t.children,p=t.before,m=t.after,h=t.getRootRef,v=t.loading,b=t.onClick,g=t.stopPropagation,y=void 0===g||g,_=t.className,w=$(t,["size","mode","appearance","stretched","align","children","before","after","getRootRef","loading","onClick","stopPropagation","className"]),S=Boolean(p||m),k=!f&&Boolean(m)!==Boolean(p),E=Z().sizeY,A=void 0===E?"none":E,C=pe();return e.createElement(Qe,Y(G({hoverMode:"vkuiButton--hover",activeMode:"vkuiButton--active",Component:w.href?"a":"button",focusVisibleMode:"outside"},w),{onClick:v?void 0:b,stopPropagation:y,className:N(_,"vkuiButton",{s:"vkuiButton--size-s",m:"vkuiButton--size-m",l:"vkuiButton--size-l"}[n],{primary:"vkuiButton--mode-primary",secondary:"vkuiButton--mode-secondary",tertiary:"vkuiButton--mode-tertiary",outline:"vkuiButton--mode-outline",link:"vkuiButton--mode-link"}[a],{accent:"vkuiButton--appearance-accent",positive:"vkuiButton--appearance-positive",negative:"vkuiButton--appearance-negative",neutral:"vkuiButton--appearance-neutral",overlay:"vkuiButton--appearance-overlay","accent-invariable":"vkuiButton--appearance-accent-invariable"}[l],{left:"vkuiButton--align-left",center:"vkuiButton--align-center",right:"vkuiButton--align-right"}[d],A!==ue.COMPACT&&Xe[A],C===te.IOS&&"vkuiButton--ios",u&&"vkuiButton--stretched",S&&"vkuiButton--with-icon",k&&!u&&"vkuiButton--singleIcon",v&&"vkuiButton--loading"),getRootRef:h}),v&&e.createElement(ge,{size:"small",className:"vkuiButton__spinner"}),e.createElement("span",{className:"vkuiButton__in"},j(p)&&e.createElement("span",{className:"vkuiButton__before",role:"presentation","data-testid":void 0},p),j(f)&&e.createElement("span",{className:"vkuiButton__content","data-testid":void 0},f),j(m)&&e.createElement("span",{className:"vkuiButton__after",role:"presentation","data-testid":void 0},m)))},Je=function(t){var r=t.mode,n=void 0===r?"horizontal":r,o=t.gap,a=void 0===o?"m":o,i=t.stretched,l=void 0!==i&&i,s=t.align,u=void 0===s?"left":s,c=t.getRootRef,d=t.className,f=t.children,p=$(t,["mode","gap","stretched","align","getRootRef","className","children"]);return e.createElement("div",G({className:N(d,"vkuiButtonGroup",{vertical:"vkuiButtonGroup--mode-vertical",horizontal:"vkuiButtonGroup--mode-horizontal"}[n],"none"!==a&&{space:"vkuiButtonGroup--gap-space",s:"vkuiButtonGroup--gap-s",m:"vkuiButtonGroup--gap-m"}[a],l&&"vkuiButtonGroup--stretched",{left:"vkuiButtonGroup--align-left",center:"vkuiButtonGroup--align-center",right:"vkuiButtonGroup--align-right"}[u]),role:"group",ref:c},p),f)},et=e.createContext({toggleDrag:K});function tt(e){return"https://dequeuniversity.com/rules/axe/".concat("4.5","/").concat(e)}"a11y: Кнопка должна содержать текст, доступный для скринридеров. Чтобы исправить эту ошибку, передайте компоненту текст или свойство aria-label.\n".concat(tt("button-name")),"a11y: Ссылка должна содержать текст, доступный для скринридеров. Чтобы исправить эту ошибку, передайте компоненту текст или свойство aria-label.\n".concat(tt("link-name")),"a11y: Изображение должно содержать альтернативный текст, который его описывает. Чтобы исправить эту ошибку, передайте компоненту свойство alt.\n".concat(tt("image-alt"));var rt=q({none:"vkuiIconButton--sizeY-none"},ue.COMPACT,"vkuiIconButton--sizeY-compact"),nt=("IconButton",new Set,function(t){var r=t.children,n=t.className,o=$(t,["children","className"]),a=pe(),i=Z().sizeY,l=void 0===i?"none":i;return e.createElement(Qe,Y(G({activeEffectDelay:200,activeMode:"background",Component:o.href?"a":"button"},o),{className:N("vkuiIconButton",l!==ue.REGULAR&&rt[l],a===te.IOS&&"vkuiIconButton--ios",n)}),r)}),ot=function(t){var r,n,o,a=t.onRemove,i=t.removePlaceholder,l=t.removePlaceholderString,s=t.children,u=Fe().window,c=e.useRef(null),d=e.useRef(!0),f=Se(e.useState(0),2),p=f[0],m=f[1];return r=u,o=Le("click",n=function(){p>0&&m(0)},{capture:!0}),Te((function(){n&&r?o.add(r):o.remove()}),[Boolean(n),Boolean(r)]),e.createElement("div",{className:N("vkuiRemovable__content","vkuiInternalRemovable__content"),style:{transform:"translateX(-".concat(null!=p?p:0,"px)")},onTransitionEnd:function(){var e;p>0?null==c||null===(e=c.current)||void 0===e||e.focus():d.current=!0}},e.createElement(nt,{hasActive:!1,hasHover:!1,"aria-label":l,className:N("vkuiRemovable__action","vkuiRemovable__toggle"),onClick:function(e){if(e.stopPropagation(),c.current){var t=c.current.offsetWidth;d.current=!1,m(t)}},disabled:p>0},e.createElement("i",{className:"vkuiRemovable__toggle-in",role:"presentation"})),s,e.createElement("span",{className:"vkuiRemovable__offset","aria-hidden":!0}),e.createElement(Qe,{Component:"button",hasActive:!1,hasHover:!1,disabled:d.current,getRootRef:c,className:"vkuiRemovable__remove",onClick:a},e.createElement("span",{className:"vkuiRemovable__remove-in"},i)))},at=function(t){var r=t.getRootRef,n=t.children,o=t.onRemove,a=void 0===o?K:o,i=t.removePlaceholder,l=void 0===i?"Удалить":i,s=t.align,u=void 0===s?"center":s,c=t.className,d=t.indent,f=void 0!==d&&d,p=$(t,["getRootRef","children","onRemove","removePlaceholder","align","className","indent"]),m=pe(),h=Ce(r),v=function(e){e.preventDefault(),a(e)},b=function(t){var r="";return e.Children.map(t,(function(e){"string"==typeof e&&(r+=" "+e)})),r.trim()}(l);return e.createElement("div",Y(G({},p),{ref:h,className:N(m===te.IOS&&"vkuiRemovable--ios","start"===u&&"vkuiRemovable--align-start",f&&"vkuiRemovable--indent",c)}),m!==te.IOS&&e.createElement("div",{className:N("vkuiRemovable__content","vkuiInternalRemovable__content")},n,e.createElement(nt,{activeMode:"opacity",hoverMode:"opacity",className:"vkuiRemovable__action",onClick:v,"aria-label":b},e.createElement(T,{role:"presentation"})),e.createElement("span",{className:"vkuiRemovable__offset","aria-hidden":!0})),m===te.IOS&&e.createElement(ot,{onRemove:v,removePlaceholder:l,removePlaceholderString:b},n))};const it=W("Icon24Chevron","chevron_24","0 0 16 24",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 24" id="chevron_24"><g fill="none" fill-rule="evenodd"><path d="M0 0h16v24H0z" /><path fill="currentColor" d="M4.706 7.706a1 1 0 0 1 0-1.412l.088-.088a.997.997 0 0 1 1.414.002l5.084 5.084a.998.998 0 0 1 0 1.416l-5.084 5.084a1.002 1.002 0 0 1-1.414.002l-.088-.088a.995.995 0 0 1 0-1.412L9 12 4.706 7.706Z" /></g></symbol>',16,24,!1,void 0);var lt,st=function(t){var r=t.className,n=t.weight,o=t.Component,a=void 0===o?"span":o,i=t.normalize,l=t.getRootRef,s=$(t,["className","weight","Component","normalize","getRootRef"]);return e.createElement(a,Y(G({},s),{ref:l,className:N(r,i&&"vkuiTypography--normalize",n&&{1:"vkuiTypography--weight-1",2:"vkuiTypography--weight-2",3:"vkuiTypography--weight-3"}[n])}))},ut=function(t){var r=t.className,n=t.caps,o=t.Component,a=void 0===o?"span":o,i=t.normalize,l=void 0===i||i,s=$(t,["className","caps","Component","normalize"]);return e.createElement(st,G({Component:a,normalize:l,className:N(r,"vkuiFootnote",n&&"vkuiFootnote--caps")},s))},ct=q({none:"vkuiHeadline--sizeY-none"},ue.COMPACT,"vkuiHeadline--sizeY-compact"),dt=function(t){var r=t.className,n=t.weight,o=void 0===n?"3":n,a=t.level,i=void 0===a?"1":a,l=t.Component,s=void 0===l?"h4":l,u=t.normalize,c=void 0===u||u,d=$(t,["className","weight","level","Component","normalize"]),f=Z().sizeY,p=void 0===f?"none":f;return e.createElement(st,G({Component:s,normalize:c,weight:o,className:N(r,"vkuiHeadline",p!==ue.REGULAR&&ct[p],{1:"vkuiHeadline--level-1",2:"vkuiHeadline--level-2"}[i])},d))},ft=q({none:"vkuiSubhead--sizeY-none"},ue.COMPACT,"vkuiSubhead--sizeY-compact"),pt=function(t){var r=t.className,n=t.Component,o=void 0===n?"h5":n,a=t.normalize,i=void 0===a||a,l=$(t,["className","Component","normalize"]),s=Z().sizeY,u=void 0===s?"none":s;return e.createElement(st,G({Component:o,normalize:i,className:N(r,"vkuiSubhead",u!==ue.REGULAR&&ft[u])},l))},mt={ios:N("vkuiSimpleCell--ios","vkuiInternalSimpleCell--ios"),android:"vkuiSimpleCell--android",vkcom:"vkuiSimpleCell--vkcom"},ht=(q(lt={none:N("vkuiSimpleCell--sizeY-none","vkuiInternalSimpleCell--sizeY-none")},ue.COMPACT,N("vkuiSimpleCell--sizeY-compact","vkuiInternalSimpleCell--sizeY-compact")),q(lt,ue.REGULAR,"vkuiSimpleCell--sizeY-regular"),lt),vt=function(t){var r=t.badgeBeforeTitle,n=t.badgeAfterTitle,o=t.badgeBeforeSubtitle,a=t.badgeAfterSubtitle,i=t.before,l=t.indicator,s=t.children,u=t.after,c=t.expandable,d=t.multiline,f=t.subhead,p=t.subtitle,m=t.extraSubtitle,h=t.className,v=$(t,["badgeBeforeTitle","badgeAfterTitle","badgeBeforeSubtitle","badgeAfterSubtitle","before","indicator","children","after","expandable","multiline","subhead","subtitle","extraSubtitle","className"]),b=pe(),g=j(u)||c&&b===te.IOS,y=Z().sizeY,_=void 0===y?"none":y;return e.createElement(Qe,Y(G({},v),{className:N("vkuiSimpleCell","vkuiInternalSimpleCell",mt.hasOwnProperty(b)?mt[b]:mt.android,ht[_],d&&"vkuiSimpleCell--mult",h)}),i,e.createElement("div",{className:N("vkuiSimpleCell__main","vkuiInternalSimpleCell__main")},f&&e.createElement(pt,{Component:"span",className:N("vkuiSimpleCell__text","vkuiSimpleCell__subhead")},f),e.createElement("div",{className:"vkuiSimpleCell__content"},r&&e.createElement("span",{className:"vkuiSimpleCell__badge"},r),e.createElement(dt,{Component:"span",className:"vkuiSimpleCell__children",weight:"3"},s),j(n)&&e.createElement("span",{className:"vkuiSimpleCell__badge"},n)),p&&e.createElement("div",{className:"vkuiSimpleCell__content"},o&&e.createElement("span",{className:"vkuiSimpleCell__badge"},o),e.createElement(ut,{normalize:!1,className:N("vkuiSimpleCell__text","vkuiSimpleCell__subtitle")},p),a&&e.createElement("span",{className:"vkuiSimpleCell__badge"},a)),m&&e.createElement(ut,{normalize:!1,className:N("vkuiSimpleCell__text","vkuiSimpleCell__extraSubtitle")},m)),j(l)&&e.createElement(dt,{Component:"span",weight:"3",className:"vkuiSimpleCell__indicator"},l),g&&e.createElement("div",{className:N("vkuiSimpleCell__after","vkuiInternalSimpleCell__after")},u,c&&b===te.IOS&&e.createElement(it,null)))};const bt=W("Icon24CheckCircleOff","check_circle_off_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="check_circle_off_24"><path fill="currentColor" d="M12 0c6.629 0 12 5.373 12 12 0 6.629-5.373 12-12 12-6.629 0-12-5.373-12-12C0 5.371 5.373 0 12 0Zm0 1.5C6.2 1.5 1.5 6.2 1.5 12S6.2 22.5 12 22.5 22.5 17.8 22.5 12 17.8 1.5 12 1.5Z" /></symbol>',24,24,!1,void 0),gt=W("Icon24CheckBoxOff","check_box_off_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="check_box_off_24"><path fill="currentColor" d="M16.872 2c1.783 0 2.43.186 3.082.534.651.349 1.163.86 1.512 1.512S22 5.345 22 7.128v9.744c0 1.783-.186 2.43-.534 3.082a3.635 3.635 0 0 1-1.512 1.512c-.652.348-1.299.534-3.082.534H7.128c-1.783 0-2.43-.186-3.082-.534s-1.163-.86-1.512-1.512C2.186 19.302 2 18.655 2 16.872V7.128c0-1.783.186-2.43.534-3.082a3.635 3.635 0 0 1 1.512-1.512C4.698 2.186 5.345 2 7.128 2zm.564 2H6.564c-.892 0-1.215.093-1.54.267-.327.174-.583.43-.757.756-.174.326-.267.65-.267 1.54v10.873c0 .892.093 1.215.267 1.54.174.327.43.583.756.757.326.174.65.267 1.54.267h10.873c.892 0 1.215-.093 1.54-.267.327-.174.583-.43.757-.756.174-.326.267-.65.267-1.54V6.563c0-.892-.093-1.215-.267-1.54a1.817 1.817 0 0 0-.756-.757c-.326-.174-.65-.267-1.54-.267z" /></symbol>',24,24,!1,void 0),yt=W("Icon24CheckCircleOn","check_circle_on_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="check_circle_on_24"><path fill="currentColor" fill-rule="evenodd" d="M12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12s5.373 12 12 12Zm6.207-14.793a1 1 0 0 0-1.414-1.414L10 14.586l-2.793-2.793a1 1 0 0 0-1.414 1.414l3.5 3.5a1 1 0 0 0 1.414 0l7.5-7.5Z" clip-rule="evenodd" /></symbol>',24,24,!1,void 0),_t=W("Icon24CheckBoxOn","check_box_on_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" id="check_box_on_24"><path fill="currentColor" fill-rule="evenodd" d="M2.436 4.184C2 5.04 2 6.16 2 8.4v7.2c0 2.24 0 3.36.436 4.216a4 4 0 0 0 1.748 1.748C5.04 22 6.16 22 8.4 22h7.2c2.24 0 3.36 0 4.216-.436a4 4 0 0 0 1.748-1.748C22 18.96 22 17.84 22 15.6V8.4c0-2.24 0-3.36-.436-4.216a4 4 0 0 0-1.748-1.748C18.96 2 17.84 2 15.6 2H8.4c-2.24 0-3.36 0-4.216.436a4 4 0 0 0-1.748 1.748zm15.771 5.023a1 1 0 0 0-1.414-1.414L10 14.586l-2.793-2.793a1 1 0 0 0-1.414 1.414l3.5 3.5a1 1 0 0 0 1.414 0z" clip-rule="evenodd" /></symbol>',24,24,!1,void 0);var wt=function(t){var r=t.Component,n=void 0===r?"span":r,o=t.getRootRef,a=t.className,i=$(t,["Component","getRootRef","className"]);return e.createElement(n,Y(G({},i),{className:N("vkuiVisuallyHidden",a),ref:o}))},St=function(t){var r=t.className,n=t.style,o=t.getRef,a=$(t,["className","style","getRef"]),i=pe(),l=i===te.IOS||i===te.VKCOM?bt:gt,s=i===te.IOS||i===te.VKCOM?yt:_t;return e.createElement("span",{className:r,style:n},e.createElement(wt,Y(G({},a),{Component:"input",type:"checkbox",className:"vkuiCellCheckbox__input",getRootRef:o})),e.createElement("span",{className:N("vkuiCellCheckbox__icon","vkuiCellCheckbox__icon--off"),"aria-hidden":!0},e.createElement(l,null)),e.createElement("span",{className:N("vkuiCellCheckbox__icon","vkuiCellCheckbox__icon--on"),"aria-hidden":!0},e.createElement(s,null)))};const kt=W("Icon24ReorderIos","reorder_ios_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="reorder_ios_24"><g fill="none" fill-rule="evenodd"><path d="M0 0h24v24H0z" opacity=".1" /><path fill="currentColor" fill-rule="nonzero" d="M2.75 7h18.5a.75.75 0 1 1 0 1.5H2.75a.75.75 0 0 1 0-1.5Zm0 4h18.5a.75.75 0 1 1 0 1.5H2.75a.75.75 0 1 1 0-1.5Zm0 4h18.5a.75.75 0 1 1 0 1.5H2.75a.75.75 0 1 1 0-1.5Z" /></g></symbol>',24,24,!1,void 0),Et=W("Icon24Reorder","reorder_24","0 0 24 24",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" id="reorder_24"><g fill="none" fill-rule="evenodd"><path d="M0 0h24v24H0z" /><path fill="currentColor" fill-rule="nonzero" d="M21 18a1 1 0 0 1-1 1H4a1 1 0 0 1 0-2h16a1 1 0 0 1 1 1Zm0-4a1 1 0 0 1-1 1H4a1 1 0 0 1 0-2h16a1 1 0 0 1 1 1Zm0-4a1 1 0 0 1-1 1H4a1 1 0 0 1 0-2h16a1 1 0 0 1 1 1ZM3 6a1 1 0 0 1 1-1h16a1 1 0 0 1 0 2H4a1 1 0 0 1-1-1Z" /></g></symbol>',24,24,!1,void 0);var At=function(t){var r=t.onDragStart,n=t.onDragMove,o=t.onDragEnd,a=t.onClick,i=t.className,l=$(t,["onDragStart","onDragMove","onDragEnd","onClick","className"]),s=pe();return e.createElement(Ie,G({className:N("vkuiCellDragger",i),onStart:r,onMoveY:n,onEnd:o,onClick:function(e){e.preventDefault(),a&&a(e)}},l),s===te.IOS?e.createElement(kt,null):e.createElement(Et,null))},Ct=function(t){var r,n,o=t.mode,a=t.onRemove,i=void 0===a?K:a,l=t.removePlaceholder,s=void 0===l?"Удалить":l,u=t.onDragFinish,c=t.before,d=t.after,f=t.disabled,p=t.draggable,m=t.Component,h=t.onChange,v=t.name,b=t.value,g=t.checked,y=t.defaultChecked,_=t.getRootRef,w=t.draggerLabel,S=void 0===w?"Перенести ячейку":w,k=t.className,E=t.style,A=$(t,["mode","onRemove","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style"]),C="selectable"===o,x="removable"===o,W=pe(),T=Ce(_),V=function(t){var r=t.rootElRef,n=t.onDragFinish,o=Se(e.useState(!1),2),a=o[0],i=o[1],l=Se(e.useState([]),2),s=l[0],u=l[1],c=Se(e.useState(0),2),d=c[0],f=c[1],p=Se(e.useState(0),2),m=p[0],h=p[1],v=Se(e.useState(0),2),b=v[0],g=v[1],y=Se(e.useState(void 0),2),_=y[0],w=y[1];return{onDragStart:function(e){var t,n=r.current;if(n){e.originalEvent.stopPropagation(),e.originalEvent.preventDefault(),i(!0);var o=[];(null===(t=n.parentElement)||void 0===t?void 0:t.childNodes)&&(o=Array.from(n.parentElement.children));var a=o.indexOf(n);f(a),h(a),u(o),g(0)}},onDragMove:function(e){e.originalEvent.stopPropagation(),e.originalEvent.preventDefault();var t=r.current;if(t){t.style.transform="translateY(".concat(e.shiftY,"px)");var n=t.getBoundingClientRect();w(b-e.shiftY<0?"down":"up"),g(e.shiftY),h(d),s.forEach((function(e,t){var r=e.getBoundingClientRect(),o=r.height/2,a=n.bottom>r.top+o,i=n.top<r.bottom-o;d<t?(a&&("down"===_&&(e.style.transform="translateY(-100%)"),h((function(e){return e+1}))),i&&"up"===_&&(e.style.transform="translateY(0)")):d>t&&(i&&("up"===_&&(e.style.transform="translateY(100%)"),h((function(e){return e-1}))),a&&"down"===_&&(e.style.transform="translateY(0)"))}))}},onDragEnd:function(e){e.originalEvent.stopPropagation(),e.originalEvent.preventDefault();var t=[d,m],r=t[0],o=t[1];s.forEach((function(e){e.style.transform=""})),u([]),h(0),f(0),w(void 0),g(0),i(!1),n&&n({from:r,to:o})},dragging:a}}({rootElRef:T,onDragFinish:u}),O=V.dragging,R=$(V,["dragging"]),P=e.useContext(et).toggleDrag;if(e.useEffect((function(){if(O)return P(!0),function(){return P(!1)}}),[O,P]),p&&(r=e.createElement(At,G({className:"vkuiCell__dragger","aria-label":S},R))),C){var j={name:v,value:b,onChange:h,defaultChecked:y,checked:g,disabled:f};n=e.createElement(St,G({className:"vkuiCell__checkbox"},j))}var M=p&&!C||x||f,L=!M&&!O,z=N("vkuiCell",W===te.IOS&&"vkuiCell--ios",O&&"vkuiCell--dragging",x&&"vkuiCell--removable",C&&"vkuiCell--selectable",f&&"vkuiCell--disabled"),F=e.createElement(vt,Y(G({hasActive:L,hasHover:L},A),{className:"vkuiCell__content",disabled:M,Component:C?"label":m,before:e.createElement(e.Fragment,null,p&&W!==te.IOS&&r,C&&n,c),after:e.createElement(e.Fragment,null,p&&W===te.IOS&&r,d)}));return x?e.createElement(at,{className:N(z,k),style:E,getRootRef:T,removePlaceholder:s,onRemove:function(e){return i(e,T.current)}},F):e.createElement("div",{className:N(z,k),style:E,ref:T},F)},xt={stroke:"vkuiImageBaseBadge--background-stroke",shadow:"vkuiImageBaseBadge--background-shadow"},Wt=e.createContext({size:0}),Tt=function(t){var r=t.alt,n=t.crossOrigin,o=t.decoding,a=t.loading,i=t.referrerPolicy,l=t.sizes,s=t.src,u=t.srcSet,c=t.useMap,d=t.getRef,f=t.size,p=void 0===f?24:f,m=t.width,h=t.height,v=t.style,b=t.className,g=t.getRootRef,y=t.withBorder,_=void 0===y||y,w=t.fallbackIcon,S=t.children,k=t["aria-label"],E=t.onClick,A=t.onLoad,C=t.onError,x=$(t,["alt","crossOrigin","decoding","loading","referrerPolicy","sizes","src","srcSet","useMap","getRef","size","width","height","style","className","getRootRef","withBorder","fallbackIcon","children","aria-label","onClick","onLoad","onError"]),W=Se(e.useState(!1),2),T=W[0],V=W[1],O=Se(e.useState(!1),2),R=O[0],K=O[1],P=s||u,j=!R&&P||!e.isValidElement(w)?null:w,M=function(){switch(p){case 28:return"vkuiImageBase--size-28";case 32:return"vkuiImageBase--size-32";case 40:return"vkuiImageBase--size-40";case 48:return"vkuiImageBase--size-48";case 72:return"vkuiImageBase--size-72"}return null}();return e.createElement(Wt.Provider,{value:{size:p}},e.createElement("div",Y(G({},x),{ref:g,style:Y(G({},v),{width:p,height:p}),className:N(b,"vkuiImageBase",M,T&&"vkuiImageBase--loaded"),role:P?"img":"presentation","aria-label":k,onClick:E}),P&&e.createElement("img",{ref:d,alt:r,className:"vkuiImageBase__img",crossOrigin:n,decoding:o,loading:a,referrerPolicy:i,sizes:l,src:s,srcSet:u,useMap:c,width:m,height:h,onLoad:function(e){V(!0),K(!1),null==A||A(e)},onError:function(e){V(!1),K(!0),null==C||C(e)}}),j&&e.createElement("div",{className:N("vkuiImageBase__fallback")},j),S,_&&e.createElement("div",{"aria-hidden":!0,className:"vkuiImageBase__border"})))};function Vt(e){return e<=36?12:e>36&&e<=48?16:e>48&&e<=64?20:Vt.MAX_SIZE}Tt.Badge=function(t){var r=t.background,n=void 0===r?"shadow":r,o=t.children,a=t.className,i=$(t,["background","children","className"]);return e.createElement("div",Y(G({},i),{className:N("vkuiImageBaseBadge",xt[n],a)}),o)},Tt.Overlay=function(t){var r=t.className,n=t.theme,o=t.visibility,a=t.children,i=t.onClick,l=$(t,["className","theme","visibility","children","onClick"]),s=function(){var e=fe().appearance;return null!=e?e:"light"}(),u=Ae(),c=null!=n?n:s,d=null!=o?o:u?"on-hover":"always";return e.createElement(Qe,Y(G({},l),{type:"button",Component:"button",className:N("vkuiImageBaseOverlay","always"===d&&"vkuiImageBaseOverlay--visible","light"===c&&"vkuiImageBaseOverlay--theme-light","dark"===c&&"vkuiImageBaseOverlay--theme-dark",r),hasHover:"on-hover"===d,hoverMode:"on-hover"===d?"vkuiImageBaseOverlay--visible":void 0,focusVisibleMode:"vkuiImageBaseOverlay--focus-visible",hasActive:!1,onClick:i}),a)},Vt.MAX_SIZE=24;const Ot=W("Icon12Circle","circle_12","0 0 12 12",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 12" id="circle_12"><path fill="currentColor" d="M10 6a4 4 0 1 1-8 0 4 4 0 0 1 8 0z" /></symbol>',12,12,!1,void 0),Rt=W("Icon12OnlineMobile","online_mobile_12","0 0 8 12",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 8 12" id="online_mobile_12"><path fill="currentColor" d="M5.99 0C7.1 0 8 .9 8 2.01v7.98C8 11.1 7.1 12 5.99 12H2.01C.9 12 0 11.1 0 9.99V2.01C0 .9.9 0 2.01 0h3.98Zm.007 3H2.004a.502.502 0 0 0-.503.502v4.995c0 .278.225.503.503.503h3.995a.502.502 0 0 0 .502-.502V3.503A.502.502 0 0 0 5.997 3Z" /></symbol>',8,12,!1,void 0);var Nt=function(t){var r=t.width,n=void 0===r?12:r,o=t.height,a=void 0===o?12:o,i=$(t,["width","height"]);return e.createElement(Ot,Y(G({},i),{width:n>=24?15:12,height:a>=24?15:12}))},Kt=function(t){var r=t.width,n=void 0===r?8:r,o=t.height,a=void 0===o?12:o,i=$(t,["width","height"]);return e.createElement(Rt,Y(G({},i),{width:n>=24?9:8,height:a>=24?15:12}))};function Pt(e){if(e<=16)return 5;if(e<=24)return 8;if(e<=32)return 10;if(e<=36)return 13;if(e<=44)return 14;if(e<=48)return 17;if(e<56)return 18;if(e<=64)return 21;if(e<=88)return 26;if(e<=96)return 30;var t=Math.ceil(.3125*e);return t+t%2}var jt={1:"red",2:"orange",3:"yellow",4:"green",5:"l-blue",6:"violet"},Mt={red:"vkuiAvatar--gradient-red",orange:"vkuiAvatar--gradient-orange",yellow:"vkuiAvatar--gradient-yellow",green:"vkuiAvatar--gradient-green",blue:"vkuiAvatar--gradient-blue","l-blue":"vkuiAvatar--gradient-l-blue",violet:"vkuiAvatar--gradient-violet"},Lt=function(t){var r=t.size,n=void 0===r?48:r,o=t.className,a=t.gradientColor,i=t.initials,l=t.fallbackIcon,s=t.children,u=$(t,["size","className","gradientColor","initials","fallbackIcon","children"]),c="number"==typeof a?jt[a]:a,d=c&&"custom"!==c,f=i?void 0:l;return e.createElement(Tt,Y(G({},u),{size:n,fallbackIcon:f,className:N("vkuiAvatar",c&&"vkuiAvatar--has-gradient",d&&Mt[c],o)}),i&&e.createElement("div",{className:"vkuiAvatar__initials",style:{fontSize:Pt(n)}},i),s)};Lt.Badge=function(t){var r=t.className,n=$(t,["className"]),o=e.useContext(Wt).size;return e.createElement(Tt.Badge,Y(G({},n),{className:N("vkuiAvatarBadge",o<96&&"vkuiAvatarBadge--shifted",r)}))},Lt.BadgeWithPreset=function(t){var r=t.preset,n=void 0===r?"online":r,o=t.className,a=$(t,["preset","className"]),i=Vt(e.useContext(Wt).size),l="online"===n,s=l?"vkuiAvatarBadge--preset-online":"vkuiAvatarBadge--preset-onlineMobile",u=l?Nt:Kt;return e.createElement(Tt.Badge,G({background:"stroke",className:N("vkuiAvatarBadge",s,o)},a),e.createElement(u,{width:i,height:i}))},Lt.Overlay=Tt.Overlay;const zt=W("Icon16DoneCircle","done_circle_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16" id="done_circle_16"><path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14Zm3.527-8.216a.75.75 0 0 0-1.06-1.06L7 9.188 5.533 7.722a.75.75 0 0 0-1.061 1.06L6.47 10.78a.75.75 0 0 0 1.06 0l3.997-3.996Z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0);function Ft(e,t){return function(){return e.apply(t,arguments)}}const{toString:It}=Object.prototype,{getPrototypeOf:Bt}=Object,Ut=(Dt=Object.create(null),e=>{const t=It.call(e);return Dt[t]||(Dt[t]=t.slice(8,-1).toLowerCase())});var Dt;const Ht=e=>(e=e.toLowerCase(),t=>Ut(t)===e),qt=e=>t=>typeof t===e,{isArray:Gt}=Array,Yt=qt("undefined"),$t=Ht("ArrayBuffer"),Qt=qt("string"),Xt=qt("function"),Zt=qt("number"),Jt=e=>null!==e&&"object"==typeof e,er=e=>{if("object"!==Ut(e))return!1;const t=Bt(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},tr=Ht("Date"),rr=Ht("File"),nr=Ht("Blob"),or=Ht("FileList"),ar=Ht("URLSearchParams");function ir(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,o;if("object"!=typeof e&&(e=[e]),Gt(e))for(n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else{const o=r?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(n=0;n<a;n++)i=o[n],t.call(null,e[i],i,e)}}function lr(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,o=r.length;for(;o-- >0;)if(n=r[o],t===n.toLowerCase())return n;return null}const sr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ur=e=>!Yt(e)&&e!==sr,cr=(dr="undefined"!=typeof Uint8Array&&Bt(Uint8Array),e=>dr&&e instanceof dr);var dr;const fr=Ht("HTMLFormElement"),pr=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),mr=Ht("RegExp"),hr=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};ir(r,((r,o)=>{!1!==t(r,o,e)&&(n[o]=r)})),Object.defineProperties(e,n)},vr="abcdefghijklmnopqrstuvwxyz",br="0123456789",gr={DIGIT:br,ALPHA:vr,ALPHA_DIGIT:vr+vr.toUpperCase()+br},yr=Ht("AsyncFunction"),_r={isArray:Gt,isArrayBuffer:$t,isBuffer:function(e){return null!==e&&!Yt(e)&&null!==e.constructor&&!Yt(e.constructor)&&Xt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Xt(e.append)&&("formdata"===(t=Ut(e))||"object"===t&&Xt(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&$t(e.buffer),t},isString:Qt,isNumber:Zt,isBoolean:e=>!0===e||!1===e,isObject:Jt,isPlainObject:er,isUndefined:Yt,isDate:tr,isFile:rr,isBlob:nr,isRegExp:mr,isFunction:Xt,isStream:e=>Jt(e)&&Xt(e.pipe),isURLSearchParams:ar,isTypedArray:cr,isFileList:or,forEach:ir,merge:function e(){const{caseless:t}=ur(this)&&this||{},r={},n=(n,o)=>{const a=t&&lr(r,o)||o;er(r[a])&&er(n)?r[a]=e(r[a],n):er(n)?r[a]=e({},n):Gt(n)?r[a]=n.slice():r[a]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&ir(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:n}={})=>(ir(t,((t,n)=>{r&&Xt(t)?e[n]=Ft(t,r):e[n]=t}),{allOwnKeys:n}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],n&&!n(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==r&&Bt(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:Ut,kindOfTest:Ht,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(Gt(e))return e;let t=e.length;if(!Zt(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:fr,hasOwnProperty:pr,hasOwnProp:pr,reduceDescriptors:hr,freezeMethods:e=>{hr(e,((t,r)=>{if(Xt(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];Xt(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return Gt(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:lr,global:sr,isContextDefined:ur,ALPHABET:gr,generateString:(e=16,t=gr.ALPHA_DIGIT)=>{let r="";const{length:n}=t;for(;e--;)r+=t[Math.random()*n|0];return r},isSpecCompliantForm:function(e){return!!(e&&Xt(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(Jt(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const o=Gt(e)?[]:{};return ir(e,((e,t)=>{const a=r(e,n+1);!Yt(a)&&(o[t]=a)})),t[n]=void 0,o}}return e};return r(e,0)},isAsyncFn:yr,isThenable:e=>e&&(Jt(e)||Xt(e))&&Xt(e.then)&&Xt(e.catch)};function wr(e,t,r,n,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),o&&(this.response=o)}_r.inherits(wr,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:_r.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Sr=wr.prototype,kr={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{kr[e]={value:e}})),Object.defineProperties(wr,kr),Object.defineProperty(Sr,"isAxiosError",{value:!0}),wr.from=(e,t,r,n,o,a)=>{const i=Object.create(Sr);return _r.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),wr.call(i,e.message,t,r,n,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Er=wr;function Ar(e){return _r.isPlainObject(e)||_r.isArray(e)}function Cr(e){return _r.endsWith(e,"[]")?e.slice(0,-2):e}function xr(e,t,r){return e?e.concat(t).map((function(e,t){return e=Cr(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}const Wr=_r.toFlatObject(_r,{},null,(function(e){return/^is[A-Z]/.test(e)})),Tr=function(e,t,r){if(!_r.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=_r.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!_r.isUndefined(t[e])}))).metaTokens,o=r.visitor||u,a=r.dots,i=r.indexes,l=(r.Blob||"undefined"!=typeof Blob&&Blob)&&_r.isSpecCompliantForm(t);if(!_r.isFunction(o))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(_r.isDate(e))return e.toISOString();if(!l&&_r.isBlob(e))throw new Er("Blob is not supported. Use a Buffer instead.");return _r.isArrayBuffer(e)||_r.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,r,o){let l=e;if(e&&!o&&"object"==typeof e)if(_r.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(_r.isArray(e)&&function(e){return _r.isArray(e)&&!e.some(Ar)}(e)||(_r.isFileList(e)||_r.endsWith(r,"[]"))&&(l=_r.toArray(e)))return r=Cr(r),l.forEach((function(e,n){!_r.isUndefined(e)&&null!==e&&t.append(!0===i?xr([r],n,a):null===i?r:r+"[]",s(e))})),!1;return!!Ar(e)||(t.append(xr(o,r,a),s(e)),!1)}const c=[],d=Object.assign(Wr,{defaultVisitor:u,convertValue:s,isVisitable:Ar});if(!_r.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!_r.isUndefined(r)){if(-1!==c.indexOf(r))throw Error("Circular reference detected in "+n.join("."));c.push(r),_r.forEach(r,(function(r,a){!0===(!(_r.isUndefined(r)||null===r)&&o.call(t,r,_r.isString(a)?a.trim():a,n,d))&&e(r,n?n.concat(a):[a])})),c.pop()}}(e),t};function Vr(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Or(e,t){this._pairs=[],e&&Tr(e,this,t)}const Rr=Or.prototype;Rr.append=function(e,t){this._pairs.push([e,t])},Rr.toString=function(e){const t=e?function(t){return e.call(this,t,Vr)}:Vr;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Nr=Or;function Kr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Pr(e,t,r){if(!t)return e;const n=r&&r.encode||Kr,o=r&&r.serialize;let a;if(a=o?o(t,r):_r.isURLSearchParams(t)?t.toString():new Nr(t,r).toString(n),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const jr=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){_r.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Mr={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Lr={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Nr,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},zr=function(e){function t(e,r,n,o){let a=e[o++];const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&_r.isArray(n)?n.length:a,l?(_r.hasOwnProp(n,a)?n[a]=[n[a],r]:n[a]=r,!i):(n[a]&&_r.isObject(n[a])||(n[a]=[]),t(e,r,n[a],o)&&_r.isArray(n[a])&&(n[a]=function(e){const t={},r=Object.keys(e);let n;const o=r.length;let a;for(n=0;n<o;n++)a=r[n],t[a]=e[a];return t}(n[a])),!i)}if(_r.isFormData(e)&&_r.isFunction(e.entries)){const r={};return _r.forEachEntry(e,((e,n)=>{t(function(e){return _r.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null},Fr={"Content-Type":void 0},Ir={transitional:Mr,adapter:["xhr","http"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,o=_r.isObject(e);if(o&&_r.isHTMLForm(e)&&(e=new FormData(e)),_r.isFormData(e))return n&&n?JSON.stringify(zr(e)):e;if(_r.isArrayBuffer(e)||_r.isBuffer(e)||_r.isStream(e)||_r.isFile(e)||_r.isBlob(e))return e;if(_r.isArrayBufferView(e))return e.buffer;if(_r.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Tr(e,new Lr.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return Lr.isNode&&_r.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=_r.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Tr(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||n?(t.setContentType("application/json",!1),function(e,t,r){if(_r.isString(e))try{return(0,JSON.parse)(e),_r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Ir.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(e&&_r.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw Er.from(e,Er.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Lr.classes.FormData,Blob:Lr.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};_r.forEach(["delete","get","head"],(function(e){Ir.headers[e]={}})),_r.forEach(["post","put","patch"],(function(e){Ir.headers[e]=_r.merge(Fr)}));const Br=Ir,Ur=_r.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Dr=Symbol("internals");function Hr(e){return e&&String(e).trim().toLowerCase()}function qr(e){return!1===e||null==e?e:_r.isArray(e)?e.map(qr):String(e)}function Gr(e,t,r,n,o){return _r.isFunction(n)?n.call(this,t,r):(o&&(t=r),_r.isString(t)?_r.isString(n)?-1!==t.indexOf(n):_r.isRegExp(n)?n.test(t):void 0:void 0)}class Yr{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function o(e,t,r){const o=Hr(t);if(!o)throw new Error("header name must be a non-empty string");const a=_r.findKey(n,o);(!a||void 0===n[a]||!0===r||void 0===r&&!1!==n[a])&&(n[a||t]=qr(e))}const a=(e,t)=>_r.forEach(e,((e,r)=>o(e,r,t)));return _r.isPlainObject(e)||e instanceof this.constructor?a(e,t):_r.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let r,n,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),r=e.substring(0,o).trim().toLowerCase(),n=e.substring(o+1).trim(),!r||t[r]&&Ur[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t):null!=e&&o(t,e,r),this}get(e,t){if(e=Hr(e)){const r=_r.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(_r.isFunction(t))return t.call(this,e,r);if(_r.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Hr(e)){const r=_r.findKey(this,e);return!(!r||void 0===this[r]||t&&!Gr(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function o(e){if(e=Hr(e)){const o=_r.findKey(r,e);!o||t&&!Gr(0,r[o],o,t)||(delete r[o],n=!0)}}return _r.isArray(e)?e.forEach(o):o(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const o=t[r];e&&!Gr(0,this[o],o,e,!0)||(delete this[o],n=!0)}return n}normalize(e){const t=this,r={};return _r.forEach(this,((n,o)=>{const a=_r.findKey(r,o);if(a)return t[a]=qr(n),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(o):String(o).trim();i!==o&&delete t[o],t[i]=qr(n),r[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return _r.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&_r.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[Dr]=this[Dr]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=Hr(e);t[n]||(function(e,t){const r=_r.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,o){return this[n].call(this,t,e,r,o)},configurable:!0})}))}(r,e),t[n]=!0)}return _r.isArray(e)?e.forEach(n):n(e),this}}Yr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),_r.freezeMethods(Yr.prototype),_r.freezeMethods(Yr);const $r=Yr;function Qr(e,t){const r=this||Br,n=t||r,o=$r.from(n.headers);let a=n.data;return _r.forEach(e,(function(e){a=e.call(r,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Xr(e){return!(!e||!e.__CANCEL__)}function Zr(e,t,r){Er.call(this,null==e?"canceled":e,Er.ERR_CANCELED,t,r),this.name="CanceledError"}_r.inherits(Zr,Er,{__CANCEL__:!0});const Jr=Zr,en=Lr.isStandardBrowserEnv?{write:function(e,t,r,n,o,a){const i=[];i.push(e+"="+encodeURIComponent(t)),_r.isNumber(r)&&i.push("expires="+new Date(r).toGMTString()),_r.isString(n)&&i.push("path="+n),_r.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function tn(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const rn=Lr.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let r;function n(r){let n=r;return e&&(t.setAttribute("href",n),n=t.href),t.setAttribute("href",n),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return r=n(window.location.href),function(e){const t=_r.isString(e)?n(e):e;return t.protocol===r.protocol&&t.host===r.host}}():function(){return!0};function nn(e,t){let r=0;const n=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const s=Date.now(),u=n[i];o||(o=s),r[a]=l,n[a]=s;let c=i,d=0;for(;c!==a;)d+=r[c++],c%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),s-o<t)return;const f=u&&s-u;return f?Math.round(1e3*d/f):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-r,s=n(l);r=a;const u={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:s||void 0,estimated:s&&i&&a<=i?(i-a)/s:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const on="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){let n=e.data;const o=$r.from(e.headers).normalize(),a=e.responseType;let i;function l(){e.cancelToken&&e.cancelToken.unsubscribe(i),e.signal&&e.signal.removeEventListener("abort",i)}_r.isFormData(n)&&(Lr.isStandardBrowserEnv||Lr.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let s=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",r=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+r))}const u=tn(e.baseURL,e.url);function c(){if(!s)return;const n=$r.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());!function(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new Er("Request failed with status code "+r.status,[Er.ERR_BAD_REQUEST,Er.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}((function(e){t(e),l()}),(function(e){r(e),l()}),{data:a&&"text"!==a&&"json"!==a?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:n,config:e,request:s}),s=null}if(s.open(e.method.toUpperCase(),Pr(u,e.params,e.paramsSerializer),!0),s.timeout=e.timeout,"onloadend"in s?s.onloadend=c:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(c)},s.onabort=function(){s&&(r(new Er("Request aborted",Er.ECONNABORTED,e,s)),s=null)},s.onerror=function(){r(new Er("Network Error",Er.ERR_NETWORK,e,s)),s=null},s.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const n=e.transitional||Mr;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(new Er(t,n.clarifyTimeoutError?Er.ETIMEDOUT:Er.ECONNABORTED,e,s)),s=null},Lr.isStandardBrowserEnv){const t=(e.withCredentials||rn(u))&&e.xsrfCookieName&&en.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===n&&o.setContentType(null),"setRequestHeader"in s&&_r.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),_r.isUndefined(e.withCredentials)||(s.withCredentials=!!e.withCredentials),a&&"json"!==a&&(s.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&s.addEventListener("progress",nn(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",nn(e.onUploadProgress)),(e.cancelToken||e.signal)&&(i=t=>{s&&(r(!t||t.type?new Jr(null,e,s):t),s.abort(),s=null)},e.cancelToken&&e.cancelToken.subscribe(i),e.signal&&(e.signal.aborted?i():e.signal.addEventListener("abort",i)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(u);d&&-1===Lr.protocols.indexOf(d)?r(new Er("Unsupported protocol "+d+":",Er.ERR_BAD_REQUEST,e)):s.send(n||null)}))},an={http:null,xhr:on};_r.forEach(an,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));function ln(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Jr(null,e)}function sn(e){return ln(e),e.headers=$r.from(e.headers),e.data=Qr.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),(e=>{e=_r.isArray(e)?e:[e];const{length:t}=e;let r,n;for(let o=0;o<t&&(r=e[o],!(n=_r.isString(r)?an[r.toLowerCase()]:r));o++);if(!n){if(!1===n)throw new Er(`Adapter ${r} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(_r.hasOwnProp(an,r)?`Adapter '${r}' is not available in the build`:`Unknown adapter '${r}'`)}if(!_r.isFunction(n))throw new TypeError("adapter is not a function");return n})(e.adapter||Br.adapter)(e).then((function(t){return ln(e),t.data=Qr.call(e,e.transformResponse,t),t.headers=$r.from(t.headers),t}),(function(t){return Xr(t)||(ln(e),t&&t.response&&(t.response.data=Qr.call(e,e.transformResponse,t.response),t.response.headers=$r.from(t.response.headers))),Promise.reject(t)}))}const un=e=>e instanceof $r?e.toJSON():e;function cn(e,t){t=t||{};const r={};function n(e,t,r){return _r.isPlainObject(e)&&_r.isPlainObject(t)?_r.merge.call({caseless:r},e,t):_r.isPlainObject(t)?_r.merge({},t):_r.isArray(t)?t.slice():t}function o(e,t,r){return _r.isUndefined(t)?_r.isUndefined(e)?void 0:n(void 0,e,r):n(e,t,r)}function a(e,t){if(!_r.isUndefined(t))return n(void 0,t)}function i(e,t){return _r.isUndefined(t)?_r.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function l(r,o,a){return a in t?n(r,o):a in e?n(void 0,r):void 0}const s={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(un(e),un(t),!0)};return _r.forEach(Object.keys(Object.assign({},e,t)),(function(n){const a=s[n]||o,i=a(e[n],t[n],n);_r.isUndefined(i)&&a!==l||(r[n]=i)})),r}const dn={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{dn[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const fn={};dn.transitional=function(e,t,r){function n(e,t){return"[Axios v1.4.0] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,o,a)=>{if(!1===e)throw new Er(n(o," has been removed"+(t?" in "+t:"")),Er.ERR_DEPRECATED);return t&&!fn[o]&&(fn[o]=!0,console.warn(n(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,o,a)}};const pn={assertOptions:function(e,t,r){if("object"!=typeof e)throw new Er("options must be an object",Er.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let o=n.length;for(;o-- >0;){const a=n[o],i=t[a];if(i){const t=e[a],r=void 0===t||i(t,a,e);if(!0!==r)throw new Er("option "+a+" must be "+r,Er.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new Er("Unknown option "+a,Er.ERR_BAD_OPTION)}},validators:dn},mn=pn.validators;class hn{constructor(e){this.defaults=e,this.interceptors={request:new jr,response:new jr}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=cn(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:o}=t;let a;void 0!==r&&pn.assertOptions(r,{silentJSONParsing:mn.transitional(mn.boolean),forcedJSONParsing:mn.transitional(mn.boolean),clarifyTimeoutError:mn.transitional(mn.boolean)},!1),null!=n&&(_r.isFunction(n)?t.paramsSerializer={serialize:n}:pn.assertOptions(n,{encode:mn.function,serialize:mn.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase(),a=o&&_r.merge(o.common,o[t.method]),a&&_r.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=$r.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const s=[];let u;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let c,d=0;if(!l){const e=[sn.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,s),c=e.length,u=Promise.resolve(t);d<c;)u=u.then(e[d++],e[d++]);return u}c=i.length;let f=t;for(d=0;d<c;){const e=i[d++],t=i[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{u=sn.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,c=s.length;d<c;)u=u.then(s[d++],s[d++]);return u}getUri(e){return Pr(tn((e=cn(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}_r.forEach(["delete","get","head","options"],(function(e){hn.prototype[e]=function(t,r){return this.request(cn(r||{},{method:e,url:t,data:(r||{}).data}))}})),_r.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,o){return this.request(cn(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}hn.prototype[e]=t(),hn.prototype[e+"Form"]=t(!0)}));const vn=hn;class bn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,o){r.reason||(r.reason=new Jr(e,n,o),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new bn((function(t){e=t})),cancel:e}}}const gn=bn,yn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(yn).forEach((([e,t])=>{yn[t]=e}));const _n=yn,wn=function e(t){const r=new vn(t),n=Ft(vn.prototype.request,r);return _r.extend(n,vn.prototype,r,{allOwnKeys:!0}),_r.extend(n,r,null,{allOwnKeys:!0}),n.create=function(r){return e(cn(t,r))},n}(Br);wn.Axios=vn,wn.CanceledError=Jr,wn.CancelToken=gn,wn.isCancel=Xr,wn.VERSION="1.4.0",wn.toFormData=Tr,wn.AxiosError=Er,wn.Cancel=wn.CanceledError,wn.all=function(e){return Promise.all(e)},wn.spread=function(e){return function(t){return e.apply(null,t)}},wn.isAxiosError=function(e){return _r.isObject(e)&&!0===e.isAxiosError},wn.mergeConfig=cn,wn.AxiosHeaders=$r,wn.formToJSON=e=>zr(_r.isHTMLForm(e)?new FormData(e):e),wn.HttpStatusCode=_n,wn.default=wn;const Sn=wn;function kn(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}const En=r(9560),An="jxLbISYQKpRQvYhN7wb_",Cn=W("Icon48CancelOutline","cancel_outline_48","0 0 48 48",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 48 48" id="cancel_outline_48"><path fill="currentColor" fill-rule="evenodd" d="M10.44 10.44a1.5 1.5 0 0 1 2.12 0L24 21.878l11.44-11.44a1.5 1.5 0 0 1 2.12 2.122L26.122 24l11.44 11.44a1.5 1.5 0 0 1-2.122 2.12L24 26.122l-11.44 11.44a1.5 1.5 0 0 1-2.12-2.122L21.878 24l-11.44-11.44a1.5 1.5 0 0 1 0-2.12Z" clip-rule="evenodd" /></symbol>',48,48,!1,void 0),xn=W("Icon28ArrowLeftOutline","arrow_left_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28" id="arrow_left_outline_28"><g fill="none" fill-rule="evenodd"><path d="M28 0H0v28h28z" /><path fill="currentColor" fill-rule="nonzero" d="M12.293 6.293a1 1 0 0 1 1.414 1.414L8.414 13H22a1 1 0 0 1 .993.883L23 14a1 1 0 0 1-1 1H8.414l5.293 5.293a1 1 0 0 1 .083 1.32l-.083.094a1 1 0 0 1-1.414 0l-7-7-.073-.082A1.005 1.005 0 0 1 5 14l.004.09A1.006 1.006 0 0 1 5 14.02V14a1.02 1.02 0 0 1 .125-.484.878.878 0 0 1 .071-.111.999.999 0 0 1 .097-.112l-.08.09c.025-.031.051-.062.08-.09Z" /></g></symbol>',28,28,!1,void 0),Wn=W("Icon28ArrowRightOutline","arrow_right_outline_28","0 0 28 28",'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28" id="arrow_right_outline_28"><g fill="none" fill-rule="evenodd"><path d="M28 0H0v28h28z" /><path fill="currentColor" fill-rule="nonzero" d="m22.707 13.293-7-7a1 1 0 0 0-1.497 1.32l.083.094L19.586 13H6a1 1 0 0 0-.993.883L5 14a1 1 0 0 0 .883.993L6 15h13.586l-5.293 5.293a1 1 0 0 0-.083 1.32l.083.094a1 1 0 0 0 1.32.083l.094-.083 7-7 .097-.112.071-.11.054-.114.035-.105.025-.118.007-.059.004-.108-.004-.07-.016-.112-.03-.111-.044-.111-.052-.098-.067-.096a1.006 1.006 0 0 0-.08-.09l-7-7 7 7Z" /></g></symbol>',28,28,!1,void 0),Tn=r(9560),Vn={VKWebAppInit:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppInit");i.current=setTimeout((()=>{a("VKWebAppInit",r),l("VKWebAppUpdateConfig"),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAddToFavorites:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){a("VKWebAppAddToFavorites",r,arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"failed":"result"),n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToFavorites");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},mode:"secondary",onClick:()=>d(!0),children:"Запретить"}),(0,s.jsx)(R,{onClick:()=>d(!1),children:"Добавить"})]}),logo:!0,subTitle:"Приложение предлагает вам добавить его в избранное",children:"Добавить приложение в избранное?"})}):null},VKWebAppAddToHomeScreen:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function f(){a("VKWebAppAddToHomeScreen",r,arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"failed":"result"),n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToHomeScreen");u.current=setTimeout((()=>{e.isError?f(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(s.Fragment,{children:(0,s.jsx)(c,{children:(0,s.jsxs)(d,{children:[(0,s.jsx)("div",{onClick:()=>f(!1),children:"Добавить"}),(0,s.jsx)("div",{onClick:()=>f(!0),children:"Отмена"})]})})}):null},VKWebAppAddToHomeScreenInfo:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToHomeScreenInfo");i.current=setTimeout((()=>{a("VKWebAppAddToHomeScreenInfo",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAllowNotifications:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function f(){a("VKWebAppAllowNotifications",r,arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"failed":"result"),n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAllowNotifications");u.current=setTimeout((()=>{e.isError?f(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(s.Fragment,{children:(0,s.jsx)(c,{children:(0,s.jsxs)(d,{children:[(0,s.jsx)("div",{onClick:()=>f(!1),children:"Добавить"}),(0,s.jsx)("div",{onClick:()=>f(!0),children:"Отмена"})]})})}):null},VKWebAppCheckAllowedScopes:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCheckAllowedScopes");i.current=setTimeout((()=>{a("VKWebAppCheckAllowedScopes",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppClose:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppClose");i.current=setTimeout((()=>{a("VKWebAppClose",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetFriends:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),[u,d]=(0,e.useState)(),[f,p]=(0,e.useState)({}),m=(0,e.useRef)(null);async function h(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=[];u.data.users.forEach(((e,r)=>{f[r]&&t.push(e)})),a("VKWebAppGetFriends",r,e?"failed":"result",{users:t}),n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetFriends");d(e),m.current=setTimeout((()=>{e.isError?h(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(m.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsxs)("div",{className:"zCi9lxzo9hA3JXcNl63p",children:[u&&u.data.users?u.data.users.map(((e,t)=>(0,s.jsx)(Ct,{before:(0,s.jsx)(Lt,{src:e.photo_200,size:40}),after:f[t]?(0,s.jsx)(zt,{}):null,style:{padding:"7px 0"},onClick:()=>function(e){let t={...f};t[e]?delete t[e]:t[e]=!0,p(t)}(t),children:e.first_name+" "+e.last_name},t))):null,(0,s.jsxs)(Je,{mode:"horizontal",style:{width:"100%",textAlign:"center",justifyContent:"flex-end"},children:[(0,s.jsx)(Ze,{mode:"secondary",onClick:()=>h(!0),children:"Отмена"}),(0,s.jsx)(Ze,{onClick:()=>h(!1),children:"Готово"})]})]})}):(0,s.jsx)(c,{loading:!0})},VKWebAppShowStoryBox:t=>{let{vk:r,removeComponent:n}=t;const[i,u]=(0,e.useState)(!1),d=(0,e.useRef)(null);async function f(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];l("VKWebAppViewRestore",!1),l("VKWebAppUpdateConfig",!1);const{item:t}=await a("VKWebAppShowStoryBox",r,e?"failed":"result",null,{moreEvents:["VKWebAppViewHide","VKWebAppViewRestore","VKWebAppUpdateConfig"]});let o=!0;if(!e&&t.subEvents&&t.subEvents.length){const e=t.subEvents[t.defaultSubEvent];let a=e.delay||0;e.data&&setTimeout((()=>{const t={type:e.subNameEvent,data:{...e.data}},o={type:e.subNameEvent,data:{...e.data},handler:r.handler,isError:e.isError};window.postMessage(t,"*"),chrome.runtime.sendMessage(o),n(r.params.request_id)}),a),o=!1}o?n(r.params.request_id):u(!1)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowStoryBox");d.current=setTimeout((()=>{e.isError?f(!0):(l("VKWebAppViewHide",!1),u(!0))}),e.delay)}(),()=>{clearTimeout(d.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{subTitle:"Кнопки просто отправят событие",buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},onClick:()=>f(!1),children:"Опубликовать"}),(0,s.jsx)(R,{mode:"secondary",onClick:()=>f(!0),children:"Отменить"})]}),onClose:()=>f(!0),children:"Тут типа создание истории"})}):null},VKWebAppGetUserInfo:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetUserInfo");i.current=setTimeout((()=>{a("VKWebAppGetUserInfo",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetAuthToken:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){a("VKWebAppGetAuthToken",r,arguments.length>0&&void 0!==arguments[0]&&arguments[0]?"failed":"result"),n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetAuthToken");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},mode:"secondary",onClick:()=>d(!0),children:"Отменить"}),(0,s.jsx)(R,{onClick:()=>d(!1),children:"Выдать"})]}),subTitle:"Будет выдан токен",children:"Выдать токен иле нет"})}):null},VKWebAppCopyText:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCopyText");i.current=setTimeout((()=>{a("VKWebAppCopyText",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCheckNativeAds:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCheckNativeAds");i.current=setTimeout((()=>{a("VKWebAppCheckNativeAds",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowNativeAds:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowNativeAds");i.current=setTimeout((()=>{a("VKWebAppShowNativeAds",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCallAPIMethod:t=>{let{vk:r,removeComponent:n}=t;const a=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCallAPIMethod");let t=20;e.data&&e.data[r.params.method]&&(t=e.data[r.params.method].delay),a.current=setTimeout((()=>{if(e.data&&e.data[r.params.method]){let t=!1;e.data[r.params.method].isError&&(t=!0);const n=t?"VKWebAppCallAPIMethodFailed":"VKWebAppCallAPIMethodResult";let o={...e.data[r.params.method].data};t&&(o={error:{...e.data[r.params.method].error}});const a={type:n,data:{request_id:r.params.request_id,...o}},i={type:n,data:{...o},handler:r.handler,isError:t};window.postMessage(a,"*"),chrome.runtime.sendMessage(i)}n(r.params.request_id)}),t)}(),()=>{clearTimeout(a.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppDownloadFile:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppDownloadFile");i.current=setTimeout((()=>{a("VKWebAppDownloadFile",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowOrderBox:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e){const{item:t}=await a("VKWebAppShowOrderBox",r,e?"failed":"result");return void n(r.params.request_id)}const t=await o("VKWebAppShowOrderBox"),i={app_id:t.order.app_id,date:1111,item:r.params.item,item_discount:"Тут типа описание",item_id:kn(1e3,9999),lang:"ru",status:"chargeable",notification_type:t.order.isTest?"order_status_change_test":"order_status_change",order_id:kn(1e3,9999999),receiver_id:t.order.user_id,user_id:t.order.user_id};let l="";Object.keys(i).sort().reduce(((e,t)=>(e[t]=i[t],l+=t+"="+i[t],e)),{});const s=new FormData;Object.keys(i).map((e=>(s.append(e,i[e]),!0))),s.append("sig",En(l+t.order.api_secret)),Sn.post(t.order.url,s).then((async t=>{const{item:o}=await a("VKWebAppShowOrderBox",r,e?"failed":"result");n(r.params.request_id)})).catch((e=>{n(r.params.request_id)}))}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowOrderBox");u.current=setTimeout((()=>{if(e.isError)return void d(!0);const t={app_id:e.order.app_id,item:r.params.item,lang:"ru",notification_type:e.order.isTest?"get_item_test":"get_item",order_id:kn(1e3,999999),receiver_id:e.order.user_id,user_id:e.order.user_id};let n="";Object.keys(t).sort().reduce(((e,r)=>(e[r]=t[r],n+=r+"="+t[r],e)),{});const o=new FormData;Object.keys(t).map((e=>(o.append(e,t[e]),!0))),o.append("sig",En(n+e.order.api_secret)),Sn.post(e.order.url,o).then((async e=>{l(!0)})).catch((e=>{console.log(e)}))}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{logo:!0,subTitle:"Тут типа идет покупка",buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},onClick:()=>d(!1),children:"Купить"}),(0,s.jsx)(R,{mode:"secondary",onClick:()=>d(!0),children:"Отменить"})]}),onClose:()=>d(!0),children:"Тут должен происходить платеж"})}):null},VKWebAppDenyNotifications:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppDenyNotifications");i.current=setTimeout((()=>{a("VKWebAppDenyNotifications",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetClientVersion:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCheckAllowedScopes");i.current=setTimeout((()=>{a("VKWebAppCheckAllowedScopes",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetConfig:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetConfig");i.current=setTimeout((()=>{a("VKWebAppGetConfig",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetGrantedPermissions:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetGrantedPermissions");i.current=setTimeout((()=>{a("VKWebAppGetGrantedPermissions",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetLaunchParams:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetLaunchParams");i.current=setTimeout((()=>{a("VKWebAppGetLaunchParams",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppOpenApp:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppOpenApp");i.current=setTimeout((()=>{a("VKWebAppOpenApp",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppOpenCodeReader:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppOpenCodeReader");i.current=setTimeout((()=>{a("VKWebAppOpenCodeReader",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppOpenWallPost:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppOpenWallPost");i.current=setTimeout((()=>{a("VKWebAppOpenWallPost",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppSendToClient:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSendToClient");i.current=setTimeout((()=>{a("VKWebAppSendToClient",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShare:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShare");i.current=setTimeout((()=>{a("VKWebAppShare",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowImages:t=>{let{vk:r,removeComponent:n}=t;const[i,u]=(0,e.useState)(!1),[d,f]=(0,e.useState)(0),[p,m]=(0,e.useState)([]),h=(0,e.useRef)(null);function v(){if(p[d])return p[d]}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowImages");r&&r.params&&r.params.images&&m(r.params.images),r&&r.params&&r.params.start_index&&f(r.params.start_index),h.current=setTimeout((()=>{if(e.isError)return a("VKWebAppShowImages",r,"failed"),void n(r.params.request_id);l("VKWebAppViewHide",!1),a("VKWebAppShowImages",r,"result",null,{moreEvents:["VKWebAppViewHide","VKWebAppViewRestore","VKWebAppUpdateConfig"]}),u(!0)}),e.delay)}(),()=>{clearTimeout(h.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsxs)("div",{className:"Rq3WwbdM9edcgMKIAXgi",children:[(0,s.jsx)("div",{className:"t0Ncw876CkCNWJgNq6Lp",onClick:function(){l("VKWebAppViewRestore",!1),l("VKWebAppUpdateConfig",!1),n(r.params.request_id)},children:(0,s.jsx)(Cn,{})}),(0,s.jsx)("div",{className:An+" gSNDL7vS9KJG3q4b6n04",onClick:function(){p[d-1]?f(d-1):p[p.length-1]&&f(p.length-1)},children:(0,s.jsx)(xn,{})}),(0,s.jsx)("div",{className:An+" VkN7if0qKc9L2Z0kUb85",onClick:function(){p[d+1]?f(d+1):p[0]&&f(0)},children:(0,s.jsx)(Wn,{})}),(0,s.jsx)("div",{className:"g1_j1wqGfWXHPwCSD4xm",children:v()?(0,s.jsx)("img",{src:v(),alt:"dd"}):null})]})}):(0,s.jsx)(c,{loading:!0})},VKWebAppShowWallPostBox:t=>{let{vk:r,removeComponent:n}=t;const[i,u]=(0,e.useState)(!1),d=(0,e.useRef)(null);async function f(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];l("VKWebAppViewRestore",!1),l("VKWebAppUpdateConfig",!1);const{item:t}=await a("VKWebAppShowWallPostBox",r,e?"failed":"result",null,{moreEvents:["VKWebAppViewHide","VKWebAppViewRestore","VKWebAppUpdateConfig"]});n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowWallPostBox");d.current=setTimeout((()=>{e.isError?f(!0):(l("VKWebAppViewHide",!1),u(!0))}),e.delay)}(),()=>{clearTimeout(d.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsxs)(V,{children:[(0,s.jsx)("div",{style:{marginBottom:16},children:"Тут типа пост на стену"}),(0,s.jsx)(R,{style:{marginBottom:16},onClick:()=>f(!1),children:"Опубликовать"}),(0,s.jsx)(R,{onClick:()=>f(!0),mode:"secondary",children:"Отмена"})]})}):null},VKWebAppTranslate:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppTranslate");i.current=setTimeout((()=>{a("VKWebAppTranslate",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppTrackEvent:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppTrackEvent");i.current=setTimeout((()=>{a("VKWebAppTrackEvent",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetEmail:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{item:t}=await a("VKWebAppGetEmail",r,e?"failed":"result");n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetEmail");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsxs)(V,{children:[(0,s.jsx)("div",{style:{marginBottom:16},children:"Запрос на получение email"}),(0,s.jsx)(R,{style:{marginBottom:16},onClick:()=>d(!1),children:"Получить"}),(0,s.jsx)(R,{onClick:()=>d(!0),mode:"secondary",children:"Отмена"})]})}):null},VKWebAppGetGeodata:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetGeodata");i.current=setTimeout((()=>{a("VKWebAppGetGeodata",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetPersonalCard:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetPersonalCard");i.current=setTimeout((()=>{a("VKWebAppGetPersonalCard",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetPhoneNumber:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetPhoneNumber");i.current=setTimeout((()=>{a("VKWebAppGetPhoneNumber",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppOpenContacts:t=>{let{vk:r,removeComponent:n}=t;const[i,u]=(0,e.useState)(!1),[d,f]=(0,e.useState)(),p=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppOpenContacts");f(e),p.current=setTimeout((()=>{e.isError?a("VKWebAppOpenContacts",r,"failed"):(l("VKWebAppViewHide",!1),u(!0))}),e.delay)}(),()=>{clearTimeout(p.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsxs)("div",{className:"bIanupaSQV7QPMJorqOY",children:[(0,s.jsx)("div",{className:"B54ljB1cNHpS_NZWRQ0Y",onClick:function(){l("VKWebAppViewRestore",!1),l("VKWebAppUpdateConfig",!1),a("VKWebAppOpenContacts",r,"closed",{},{moreEvents:["VKWebAppViewHide","VKWebAppViewRestore","VKWebAppUpdateConfig"]}),n(r.params.request_id)},children:(0,s.jsx)(Cn,{})}),(0,s.jsx)("div",{className:"c9xyoLftss2qqdgSbRpZ",children:d&&d.data.contacts?d.data.contacts.map(((e,t)=>(0,s.jsx)(Ct,{before:(0,s.jsx)(Lt,{size:40}),subtitle:e.phone,style:{padding:"7px 0"},onClick:()=>function(e){l("VKWebAppViewRestore",!1),l("VKWebAppUpdateConfig",!1);let t={moreEvents:["VKWebAppViewHide","VKWebAppViewRestore","VKWebAppUpdateConfig"]};d&&d.data.contacts&&d.data.contacts[e]?a("VKWebAppOpenContacts",r,"done",d.data.contacts[e],t):a("VKWebAppOpenContacts",r,"failed",null,t),n(r.params.request_id)}(t),children:e.first_name+" "+e.last_name},t))):null})]})}):(0,s.jsx)(c,{loading:!0})},VKWebAppAddToCommunity:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToCommunity");i.current=setTimeout((()=>{a("VKWebAppAddToCommunity",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAllowMessagesFromGroup:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAllowMessagesFromGroup");i.current=setTimeout((()=>{a("VKWebAppAllowMessagesFromGroup",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetCommunityToken:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetCommunityToken");i.current=setTimeout((()=>{a("VKWebAppGetCommunityToken",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGetGroupInfo:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGetGroupInfo");i.current=setTimeout((()=>{a("VKWebAppGetGroupInfo",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppJoinGroup:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{item:t}=await a("VKWebAppJoinGroup",r,e?"failed":"result");n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppJoinGroup");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{logo:!0,subTitle:"Приложение предлагает вам подписаться на сообщества.",buttonsWrap:(0,s.jsx)(R,{style:{marginBottom:16},onClick:()=>d(!1),children:"Подписаться"}),onClose:()=>d(!0),children:"Сообщество"})}):null},VKWebAppLeaveGroup:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{item:t}=await a("VKWebAppLeaveGroup",r,e?"failed":"result");n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppLeaveGroup");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{logo:!0,subTitle:"Приложение предлагает вам отписаться от данного сообщества.",buttonsWrap:(0,s.jsx)(R,{style:{marginBottom:16},onClick:()=>d(!1),children:"Отписаться"}),onClose:()=>d(!0),children:"Сообщество"})}):null},VKWebAppSendPayload:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSendPayload");i.current=setTimeout((()=>{a("VKWebAppSendPayload",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowCommunityWidgetPreviewBox:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowCommunityWidgetPreviewBox");i.current=setTimeout((()=>{a("VKWebAppShowCommunityWidgetPreviewBox",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowSlidesSheet:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{item:t}=await a("VKWebAppShowSlidesSheet",r,e?"failed":"result");n(r.params.request_id)}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowSlidesSheet");u.current=setTimeout((()=>{e.isError?d(!0):l(!0)}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{logo:!0,subTitle:"Тут типа слайдер запустился",buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},onClick:()=>d(!1),children:"Готово"}),(0,s.jsx)(R,{mode:"secondary",onClick:()=>d(!0),children:"Пропустить"})]}),onClose:()=>d(!0),children:"Слайдер типа"})}):null},VKWebAppAddToProfile:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToProfile");i.current=setTimeout((()=>{a("VKWebAppAddToProfile",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppRemoveFromProfile:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppRemoveFromProfile");i.current=setTimeout((()=>{a("VKWebAppRemoveFromProfile",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppRecommend:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppRecommend");i.current=setTimeout((()=>{a("VKWebAppRecommend",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppSubscribeStoryApp:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSubscribeStoryApp");i.current=setTimeout((()=>{a("VKWebAppSubscribeStoryApp",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowBannerAd:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowBannerAd");i.current=setTimeout((()=>{a("VKWebAppShowBannerAd",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCheckBannerAd:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCheckBannerAd");i.current=setTimeout((()=>{a("VKWebAppCheckBannerAd",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppHideBannerAd:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppHideBannerAd");i.current=setTimeout((()=>{a("VKWebAppHideBannerAd",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppConversionHit:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppConversionHit");i.current=setTimeout((()=>{a("VKWebAppConversionHit",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppRetargetingPixel:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppRetargetingPixel");i.current=setTimeout((()=>{a("VKWebAppRetargetingPixel",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAddToChat:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAddToChat");i.current=setTimeout((()=>{a("VKWebAppAddToChat",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCallStart:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCallStart");i.current=setTimeout((()=>{a("VKWebAppCallStart",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCallJoin:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCallJoin");i.current=setTimeout((()=>{a("VKWebAppCallJoin",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCallGetStatus:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCallGetStatus");i.current=setTimeout((()=>{a("VKWebAppCallGetStatus",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppResizeWindow:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppResizeWindow");i.current=setTimeout((()=>{a("VKWebAppResizeWindow",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppScroll:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppScroll");i.current=setTimeout((()=>{a("VKWebAppScroll",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppScrollTop:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppScrollTop");i.current=setTimeout((()=>{a("VKWebAppScrollTop",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppSetLocation:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSetLocation");i.current=setTimeout((()=>{a("VKWebAppSetLocation",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppSetSwipeSettings:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSetSwipeSettings");i.current=setTimeout((()=>{a("VKWebAppSetSwipeSettings",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppSetViewSettings:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppSetViewSettings");i.current=setTimeout((()=>{a("VKWebAppSetViewSettings",r);const e={status_bar_style:r.params.status_bar_style,action_bar_color:r.params.action_bar_color,deviceChange:!0};chrome.runtime.sendMessage(e),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppStorageGet:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppStorageGet");i.current=setTimeout((()=>{a("VKWebAppStorageGet",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppStorageGetKeys:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppStorageGetKeys");i.current=setTimeout((()=>{a("VKWebAppStorageGetKeys",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppStorageSet:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppStorageSet");i.current=setTimeout((()=>{a("VKWebAppStorageSet",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppTapticImpactOccurred:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppTapticImpactOccurred");i.current=setTimeout((()=>{a("VKWebAppTapticImpactOccurred",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppTapticNotificationOccurred:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppTapticNotificationOccurred");i.current=setTimeout((()=>{a("VKWebAppTapticNotificationOccurred",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppTapticSelectionChanged:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppTapticSelectionChanged");i.current=setTimeout((()=>{a("VKWebAppTapticSelectionChanged",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppFlashGetInfo:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppFlashGetInfo");i.current=setTimeout((()=>{a("VKWebAppFlashGetInfo",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppFlashSetLevel:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppFlashSetLevel");i.current=setTimeout((()=>{a("VKWebAppFlashSetLevel",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAccelerometerStart:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAccelerometerStart");i.current=setTimeout((()=>{a("VKWebAppAccelerometerStart",r);const e={name:"VKWebAppAccelerometerStart",refresh_rate:r.params.refresh_rate||1e3,sensorActive:!0};chrome.runtime.sendMessage(e),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppAccelerometerStop:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppAccelerometerStop");i.current=setTimeout((()=>{a("VKWebAppAccelerometerStop",r),chrome.runtime.sendMessage({name:"VKWebAppAccelerometerStart",sensorStop:!0}),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppDeviceMotionStart:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppDeviceMotionStart");i.current=setTimeout((()=>{a("VKWebAppDeviceMotionStart",r);const e={name:"VKWebAppDeviceMotionStart",refresh_rate:r.params.refresh_rate||1e3,sensorActive:!0};chrome.runtime.sendMessage(e),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppDeviceMotionStop:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppDeviceMotionStop");i.current=setTimeout((()=>{a("VKWebAppDeviceMotionStop",r),chrome.runtime.sendMessage({name:"VKWebAppDeviceMotionStart",sensorStop:!0}),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGyroscopeStart:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGyroscopeStart");i.current=setTimeout((()=>{a("VKWebAppGyroscopeStart",r);const e={name:"VKWebAppGyroscopeStart",refresh_rate:r.params.refresh_rate||1e3,sensorActive:!0};chrome.runtime.sendMessage(e),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppCreateHash:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppCreateHash");i.current=setTimeout((()=>{a("VKWebAppCreateHash",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppShowSubscriptionBox:t=>{let{vk:r,removeComponent:n}=t;const[i,l]=(0,e.useState)(!1),u=(0,e.useRef)(null);async function d(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e){const{item:t}=await a("VKWebAppShowSubscriptionBox",r,e?"failed":"result");return void n(r.params.request_id)}const t=await o("VKWebAppShowSubscriptionBox"),i={app_id:t.order.app_id,cancel_reason:t.order.cancel_reason,item_id:r.params.item,item_price:r.params.price,notification_type:t.order.isTest?"subscription_status_change_test":"subscription_status_change",status:t.order.status,next_bill_time:t.order.next_bill_time,pending_cancel:t.order.pending_cancel,subscription_id:t.order.subscription_id,user_id:t.order.user_id};let l="";Object.keys(i).sort().reduce(((e,t)=>(e[t]=i[t],l+=t+"="+i[t],e)),{});const s=new FormData;Object.keys(i).map((e=>(s.append(e,i[e]),!0))),s.append("sig",Tn(l+t.order.api_secret)),Sn.post(t.order.url,s).then((async t=>{const{item:o}=await a("VKWebAppShowSubscriptionBox",r,e?"failed":"result");n(r.params.request_id)})).catch((e=>{n(r.params.request_id)}))}return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppShowSubscriptionBox");u.current=setTimeout((()=>{if(e.isError)return void d(!0);const t={app_id:e.order.app_id,item:"d",lang:"ru",notification_type:e.order.isTest?"get_subscription_test":"get_subscription",order_id:kn(1e3,999999),receiver_id:e.order.user_id,user_id:e.order.user_id};let r="";Object.keys(t).sort().reduce(((e,n)=>(e[n]=t[n],r+=n+"="+t[n],e)),{});const n=new FormData;Object.keys(t).map((e=>(n.append(e,t[e]),!0))),n.append("sig",Tn(r+e.order.api_secret)),Sn.post(e.order.url,n).then((async e=>{console.log(e),l(!0)})).catch((e=>{console.log(e)}))}),e.delay)}(),()=>{clearTimeout(u.current)})),[]),i?(0,s.jsx)(c,{children:(0,s.jsx)(V,{logo:!0,subTitle:"Тут типа идет покупка подписки",buttonsWrap:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(R,{style:{marginRight:16},onClick:()=>d(!1),children:"Купить"}),(0,s.jsx)(R,{mode:"secondary",onClick:()=>d(!0),children:"Отменить"})]}),onClose:()=>d(!0),children:"Тут должна происходить подписка"})}):null},VKWebAppOpenPayForm:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppOpenPayForm");i.current=setTimeout((()=>{a("VKWebAppOpenPayForm",r),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppScrollTopStart:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppScrollTopStart");i.current=setTimeout((()=>{a("VKWebAppScrollTopStart",r),chrome.runtime.sendMessage({name:"VKWebAppScrollTopStart",refresh_rate:1e3,sensorActive:!0}),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppScrollTopStop:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppScrollTopStop");i.current=setTimeout((()=>{a("VKWebAppScrollTopStop",r),chrome.runtime.sendMessage({name:"VKWebAppScrollTopStart",sensorStop:!0}),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})},VKWebAppGyroscopeStop:t=>{let{vk:r,removeComponent:n}=t;const i=(0,e.useRef)(null);return(0,e.useEffect)((()=>(async function(){const e=await o("VKWebAppGyroscopeStop");i.current=setTimeout((()=>{a("VKWebAppGyroscopeStop",r);const e={name:"VKWebAppGyroscopeStart",refresh_rate:r.params.refresh_rate||1e3,sensorActive:!0};chrome.runtime.sendMessage(e),n(r.params.request_id)}),e.delay)}(),()=>{clearTimeout(i.current)})),[]),(0,s.jsx)(s.Fragment,{})}},On="jiLfYfpTMSE7Z8s0vw_Z",Rn="_cB9Jgq3bob09pH9IGJV",Nn="sVSHUYfASYAqqI1HTv9T",Kn="TGWUOGdbVpuAZIJtDpgG",Pn=W("Icon16LogoApple","logo_apple_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" id="logo_apple_16"><path fill="currentColor" fill-rule="evenodd" d="M11.833 7.44c-.018-1.774 1.45-2.624 1.516-2.666-.825-1.204-2.11-1.369-2.568-1.388-1.093-.11-2.134.642-2.689.642-.553 0-1.41-.625-2.317-.609-1.192.018-2.29.691-2.904 1.755-1.239 2.143-.318 5.317.89 7.055.59.85 1.293 1.806 2.216 1.772.89-.036 1.225-.574 2.3-.574 1.076 0 1.378.574 2.319.556.957-.018 1.563-.867 2.149-1.72.677-.987.956-1.942.972-1.991-.02-.01-1.866-.714-1.884-2.832Zm-1.768-5.204c.49-.593.82-1.415.73-2.236-.706.029-1.561.469-2.068 1.06-.454.525-.852 1.363-.745 2.167.788.061 1.592-.4 2.083-.991Z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0),jn=W("Icon16StoryOutline","story_outline_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" id="story_outline_16"><path fill="currentColor" fill-rule="evenodd" d="M6.219 1.5H9.78c.674 0 1.225 0 1.672.037.463.037.882.118 1.273.317a3.25 3.25 0 0 1 1.42 1.42c.199.391.28.81.317 1.273.037.448.037.998.037 1.672V9.78c0 .674 0 1.225-.037 1.672-.037.463-.118.882-.317 1.273a3.25 3.25 0 0 1-1.42 1.42c-.391.199-.81.28-1.273.317-.447.037-.998.037-1.672.037H6.22c-.674 0-1.224 0-1.672-.036-.463-.038-.882-.12-1.272-.318a3.25 3.25 0 0 1-1.42-1.42c-.2-.391-.28-.81-.318-1.273-.037-.447-.037-.998-.037-1.672V6.22c0-.674 0-1.224.037-1.672.037-.463.118-.882.317-1.272a3.25 3.25 0 0 1 1.42-1.42c.391-.2.81-.28 1.273-.318.448-.037.998-.037 1.672-.037Zm-1.55 1.532c-.37.03-.57.085-.714.159a1.75 1.75 0 0 0-.764.765c-.074.144-.13.343-.16.713C3.001 5.05 3 5.538 3 6.25v3.5c0 .712 0 1.202.032 1.58.03.371.085.57.159.714a1.75 1.75 0 0 0 .765.765c.144.074.343.13.713.16.38.03.869.031 1.581.031h3.5c.712 0 1.202 0 1.58-.032.371-.03.57-.085.714-.159a1.75 1.75 0 0 0 .765-.765c.074-.144.13-.343.16-.713.03-.38.031-.869.031-1.581v-3.5c0-.712 0-1.202-.032-1.581-.03-.37-.085-.57-.159-.713a1.75 1.75 0 0 0-.765-.765c-.144-.074-.343-.13-.713-.16C10.95 3.002 10.462 3 9.75 3h-3.5c-.712 0-1.202 0-1.581.032ZM8 6.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3ZM5 8a3 3 0 1 1 6 0 3 3 0 0 1-6 0Z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0),Mn=W("Icon16WarningTriangleOutline","warning_triangle_outline_16","0 0 16 16",'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" id="warning_triangle_outline_16"><path fill="currentColor" fill-rule="evenodd" d="M8.393 3.234a.45.45 0 0 0-.787 0l-5.05 9.098a.45.45 0 0 0 .393.668H13.05a.45.45 0 0 0 .394-.668L8.393 3.234Zm-2.098-.728c.743-1.338 2.667-1.338 3.41 0l5.051 9.097c.722 1.3-.218 2.897-1.705 2.897H2.95c-1.487 0-2.427-1.597-1.705-2.897l5.051-9.097ZM8 5.5a.75.75 0 0 1 .75.75v2.5a.75.75 0 1 1-1.5 0v-2.5A.75.75 0 0 1 8 5.5ZM8 12a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Z" clip-rule="evenodd" /></symbol>',16,16,!1,void 0),Ln=e=>{let{deviceProps:t,styleRoot:r}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:"n8tnpyMTEeAAu9S3lleJ",style:r,children:(0,s.jsxs)("div",{className:"j5DDPtJzaw8L9wR74LNB",children:[(0,s.jsx)("div",{className:On,children:"15:32"}),(0,s.jsx)("div",{className:"O9Le0ciaplH78Ts87LEW",children:(0,s.jsx)("div",{className:Rn})}),(0,s.jsxs)("div",{className:Nn,children:[(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(Pn,{})}),(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(jn,{})}),(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(Mn,{})})]})]})}),(0,s.jsx)("div",{className:"OO8M8J_9oiut2wO_0M6H",style:r,children:(0,s.jsx)("div",{className:Rn})})]})},zn=e=>{let{deviceProps:t,styleRoot:r={}}=e,n={color:"dark"===t.statusBarStyle?"#000":"#fff",background:t.actionBarColor,...r};return(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("div",{className:"d3v2VCL5jLYqWvC83rVw",children:(0,s.jsxs)("div",{className:"_57D2L21tvGFxJYxvxtF",style:n,children:[(0,s.jsxs)("div",{className:On,children:["15:32",(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(Mn,{})})]}),(0,s.jsxs)("div",{className:Nn,children:[(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(Pn,{})}),(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(jn,{})}),(0,s.jsx)("div",{className:Kn,children:(0,s.jsx)(Mn,{})})]})]})})})},Fn=()=>{const[t,r]=(0,e.useState)({}),[n,o]=(0,e.useState)(),[a,i]=(0,e.useState)(),l=(0,e.useRef)({});function u(e){const t={...l.current};t["vk"+e]&&delete t["vk"+e],l.current=t,r({...t})}return(0,e.useEffect)((()=>{function e(e){if(window.extensionEnable&&e.data&&e.data.params&&e.data.params.request_id&&e.data.handler&&Vn[e.data.handler]){const t={...l.current};t["vk"+e.data.params.request_id]={componentName:e.data.handler,props:{vk:{...e.data}}},l.current=t,r({...t})}}return window.addEventListener("message",e,!1),()=>{window.removeEventListener("message",e,!1)}}),[]),(0,e.useEffect)((()=>{chrome.runtime.onMessage.addListener(((e,t,r)=>{let{detail:n,addHistory:a,typeMessage:l,...s}=e;if("setDevice"===l){let e=document.documentElement.style;return"DeviceIPhone"===s.nameComponent?(e.setProperty("--vkui_internal--safe_area_inset_top",`${s.device.safeTop}px`),e.setProperty("--vkui_internal--safe_area_inset_bottom",`${s.device.safeBottom}px`)):(e.removeProperty("--vkui_internal--safe_area_inset_top"),e.removeProperty("--vkui_internal--safe_area_inset_bottom")),o(s.nameComponent),void i(s.device)}"sensorOnlyChange"!==l?"imSender"===l&&setTimeout((()=>{window.postMessage(n,"*"),chrome.runtime.sendMessage(a)}),1):window.postMessage(n,"*")}))}),[]),(0,s.jsxs)(s.Fragment,{children:[Object.keys(t).map((e=>{let r=Vn[t[e].componentName];return(0,s.jsx)(r,{...t[e].props,removeComponent:u},t[e].props.vk.params.request_id)})),n?function(){switch(n){case"DeviceIPhone":return(0,s.jsx)(Ln,{deviceProps:a});case"DeviceAndroid":return(0,s.jsx)(zn,{deviceProps:a});default:return null}}():null]})};window.addEventListener("message",(function e(t){t.data&&t.data.__VK_MOCK_EXTENSION__&&(window.extensionEnable=!0,window.removeEventListener("message",e))}),!1);const In=document.createElement("div");In.id="mockVkDivElement";const Bn=t.createRoot(In);(document.head||document.documentElement).appendChild(In),Bn.render((0,s.jsx)(Fn,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,